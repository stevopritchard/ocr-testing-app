"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const querystring_1 = require("querystring");
class RequestHelper {
    constructor(axios, clientParams) {
        this.axios = axios;
        this.clientParams = clientParams;
        this.expiresInBufferInSeconds = 2;
        this.tokenUrl = `https://oauth.brightpearl.com/token/${this.clientParams.account}`;
        this.updateApiDomain(`ws-${this.clientParams.dataCenter}.brightpearl.com`, this.clientParams.account);
        this.setInterceptors();
    }
    setInterceptors() {
        this.axios.interceptors.request.use((config) => this.checkAuthCredentials(config));
    }
    updateApiDomain(apiDomain, account) {
        this.baseUrl = `https://${apiDomain}/public-api/${account}`;
    }
    async checkAuthCredentials(config) {
        // Check for token url to avoid infinite loop
        const isPublicApp = this.isPublicApp(this.clientParams);
        const brightpearlCall = this.checkIfBrightpearlAPICall(config.url);
        if (!brightpearlCall ||
            config.url === this.tokenUrl ||
            !isPublicApp) {
            return config;
        }
        else if (isPublicApp && !this.isTokenExpired(this.credentials, this.expiresAt)) {
            return this.setConfig(config, this.credentials);
        }
        else {
            const newCredentials = await this.refreshToken(this.clientParams);
            this.updateClientCredentials(newCredentials);
            return this.setConfig(config, newCredentials);
        }
    }
    checkIfBrightpearlAPICall(url) {
        return url.includes("brightpearl.com/public-api");
    }
    async refreshToken(clientParams) {
        try {
            const payload = querystring_1.stringify({
                grant_type: "refresh_token",
                refresh_token: clientParams.publicAppCredentials.refreshToken,
                client_id: clientParams.publicAppCredentials.clientId,
                client_secret: clientParams.publicAppCredentials.clientSecret,
            });
            const httpResponse = await this.axios.post(this.tokenUrl, payload, {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            });
            return httpResponse.data;
        }
        catch (error) {
            const errorMsg = error.response ? JSON.stringify(error.response.data) : error.toString();
            throw new Error(`Could not refresh Brightpearl token. ${errorMsg}`);
        }
    }
    updateClientCredentials(credentials) {
        this.credentials = credentials;
        this.expiresAt = this.convertMillisecondsToSeconds(Date.now()) + credentials.expires_in;
    }
    isTokenExpired(credentials, expiresAt) {
        if (!credentials || !expiresAt) {
            return true;
        }
        const currentTimeInSeconds = this.convertMillisecondsToSeconds(Date.now());
        const expiresAtTimeWithBuffer = this.expiresAt + this.expiresInBufferInSeconds;
        const isExpired = currentTimeInSeconds >= expiresAtTimeWithBuffer;
        return isExpired;
    }
    isPublicApp(clientParams) {
        return !!(clientParams.publicAppCredentials);
    }
    convertMillisecondsToSeconds(milliseconds) {
        return Math.ceil(milliseconds / 1000);
    }
    setConfig(config, credentials) {
        config.url = this.setApiDomain(config.url, credentials);
        config.headers.Authorization = `${credentials.token_type} ${credentials.access_token}`;
        return config;
    }
    setApiDomain(url, credentials) {
        const domainUpToDate = url.includes(credentials.api_domain);
        if (domainUpToDate) {
            return url;
        }
        else {
            // https://help.brightpearl.com/hc/en-us/articles/360032240811-OAuth-authentication?l_nav=1
            // Brightpearl can change API Domain at any time
            this.updateApiDomain(credentials.api_domain, this.clientParams.account);
            const relativeUrl = url.split("brightpearl.com")[1];
            return `https://${credentials.api_domain}${relativeUrl}`;
        }
    }
}
exports.RequestHelper = RequestHelper;
//# sourceMappingURL=requestHelper.js.map