"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class OrderStatus {
    constructor(bpClient, cacheOrderStatusLookup) {
        this.bpClient = bpClient;
        this.cacheOrderStatusLookup = cacheOrderStatusLookup;
        this.orderStatuses = undefined;
    }
    /**
     * Updates orders using the specified status name or id
     * @param orderId - order id
     * @param statusRef - Information on the order status you wish to update an order with
     * @returns void - A successful request returns void
     */
    async update(orderId, statusRef) {
        let orderStatusId;
        if (statusRef.statusId) {
            orderStatusId = statusRef.statusId;
        }
        else {
            if (!statusRef.statusInfo.name || !statusRef.statusInfo.orderTypeCode) {
                throw new Error(`An order status name and type must be present if no status id is provided.`);
            }
            const orderStatuses = await this.get();
            const status = this.find(orderStatuses, statusRef.statusInfo.name, statusRef.statusInfo.orderTypeCode);
            orderStatusId = status.statusId;
        }
        await this.bpClient.putOrderStatus(orderId, { orderStatusId });
    }
    /**
     * Gets all order statuses or a single order status if an ID is supplied
     * @param statusId - Optional order status id if you already know the value
     * @returns Array of OrderStatusInfo - Array of order statuses
     */
    async get(statusId) {
        if (this.cacheOrderStatusLookup) {
            return await this.getCachedOrderStatuses(statusId);
        }
        else {
            return await this.getOrderStatuses(statusId);
        }
    }
    /**
     * Gets all order statuses and finds the one which matches the specified name
     * @param orderStatuses - Array of order statuses you wish to query
     * @param statusName - The name of the order status you wish to find
     * @param orderTypeCode - The order type
     * @returns OrderStatusInfo - The order status in question if it exists
     */
    find(orderStatuses, statusName, orderTypeCode) {
        const status = orderStatuses.find((statusInfo) => statusInfo.name === statusName &&
            statusInfo.orderTypeCode === orderTypeCode);
        if (!status) {
            throw new Error(`No Order Statuses in Brightpearl match ${statusName} with order type code ${orderTypeCode}.`);
        }
        return status;
    }
    async getCachedOrderStatuses(statusId) {
        if (this.orderStatuses) {
            return this.orderStatuses;
        }
        this.orderStatuses = await this.getOrderStatuses(statusId);
        return this.orderStatuses;
    }
    async getOrderStatuses(statusId) {
        const queryParams = !statusId ? "" : statusId;
        return await this.bpClient.getOrderStatus(queryParams);
    }
}
exports.OrderStatus = OrderStatus;
//# sourceMappingURL=OrderStatus.js.map