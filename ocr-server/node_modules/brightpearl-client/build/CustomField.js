"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CustomField {
    constructor(bpClient, cacheMetaDataLookup) {
        this.bpClient = bpClient;
        this.cacheMetaDataLookup = cacheMetaDataLookup;
        this.customFieldMetadataInformation = undefined;
    }
    /**
     * Builds the request body for updating a Freeform custom field
     * @param fieldCode - The code of the custom field you want to target
     * @param value - The value you want to assign to the custom field
     * @param operation - The type of operation you want to perform on the custom field
     * @returns CustomFieldUpdate - Request body to update a Freeform custom field
     */
    buildFreeformRequest(fieldCode, value, operation) {
        return {
            op: operation,
            path: `/${fieldCode}`,
            value
        };
    }
    /**
     * Finds specified Select List option in options HashMap and builds the request body for updating a Select List custom field
     * @param customFieldMetadata - The field which contains the HashMap of Select List options
     * @param selectListOptionName - The option name you wish to use
     * @param operation - The type of operation you want to perform on the custom field
     * @returns CustomFieldUpdate - Request body to update a Select List custom field
     */
    buildSelectListRequest(customFieldMetadata, selectListOptionName, operation) {
        const option = Object.values(customFieldMetadata.options).find((selection) => selection.value === selectListOptionName);
        if (!option) {
            throw new Error(`Could not match custom field options to option name ${selectListOptionName}`);
        }
        return {
            op: operation,
            path: `/${customFieldMetadata.code}`,
            value: {
                id: option.id
            }
        };
    }
    /**
     * Updates a single Freeform custom field with the supplied value
     * @param orderId - The ID of the order in question
     * @param fieldName - The name of the custom field you want to target
     * @param value - The value you want to assign to the custom field
     * @param orderType - The type of order in question
     * @param operation - The type of operation you want to perform on the custom field
     * @returns void - A successful request returns void
     */
    async updateSingleFreeformField(orderId, fieldName, value, orderType, operation) {
        const field = await this.find(fieldName, orderType);
        const request = this.buildFreeformRequest(field.code, value, operation);
        await this.update(orderId, [request]);
    }
    /**
     * Updates a single Select List custom field with the supplied option
     * @param orderId - The ID of the order in question
     * @param fieldName - The name of the custom field you want to target
     * @param selectListOptionName - The option name you wish to use
     * @param orderType - The type of order in question
     * @param operation - The type of operation you want to perform on the custom field
     * @returns void - A successful request returns void
     */
    async updateSingleSelectListField(orderId, fieldName, selectListOptionName, orderType, operation) {
        const field = await this.find(fieldName, orderType);
        const request = this.buildSelectListRequest(field, selectListOptionName, operation);
        await this.update(orderId, [request]);
    }
    /**
     * Updates a single Select List custom field with the supplied option
     * @param orderId - The ID of the order in question
     * @param request - Array of CustomFieldUpdate requests
     * @returns void - A successful request returns void
     */
    async update(orderId, request) {
        await this.bpClient.patchCustomField(orderId, request);
    }
    /**
     * Fetches all custom fields for specified order type and finds the one that corresponds to supplied field name
     * @param fieldName - The name of the custom field you want to target
     * @param orderType - The type of order in question
     * @returns CustomFieldMetadataInformation - Returns Custom Field Metadata if it exists
     */
    async find(fieldName, orderType) {
        const fields = await this.getMetadata(orderType);
        const field = fields.find((metaData) => metaData.name === fieldName);
        if (!field) {
            throw new Error(`Could not find any custom fields that match ${fieldName}`);
        }
        return field;
    }
    /**
     * Fetches all custom fields for specified order type
     * @param orderType - The type of order in question
     * @returns Array of CustomFieldMetadataInformation - Returns all custom field metadata
     */
    async getMetadata(orderType) {
        if (this.cacheMetaDataLookup) {
            return await this.getCachedCustomFields(orderType);
        }
        else {
            return await this.getCustomFields(orderType);
        }
    }
    async getCustomFields(orderType) {
        return await this.bpClient.getCustomFieldMetadata(orderType);
    }
    async getCachedCustomFields(orderType) {
        if (this.customFieldMetadataInformation) {
            return this.customFieldMetadataInformation;
        }
        this.customFieldMetadataInformation = await this.getCustomFields(orderType);
        return this.customFieldMetadataInformation;
    }
}
exports.CustomField = CustomField;
//# sourceMappingURL=CustomField.js.map