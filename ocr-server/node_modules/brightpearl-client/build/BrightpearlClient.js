"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Endpoints_1 = require("./Endpoints");
const requestHelper_1 = require("./requestHelper");
const urlHelper_1 = require("./urlHelper");
class BrightpearlClient {
    constructor(axios, clientParams) {
        this.axios = axios;
        this.clientParams = clientParams;
        this.requestHelper = new requestHelper_1.RequestHelper(this.axios, this.clientParams);
    }
    // tslint:disable-next-line:variable-name
    get baseUrl() {
        return this.requestHelper.baseUrl;
    }
    /**
     * Search Purchase & Sales Orders
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    async searchOrders(params) {
        if (params.parentOrderId && Array.isArray(params.parentOrderId)) {
            params.parentOrderId = params.parentOrderId.join();
        }
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    /**
     * Gets Purchase & Sales Orders
     * @param orderIds - Sorted array of order ids
     * @param optionalParams - Optionally pass in array of order url params
     * @returns OrderInformation - Array of order information
     */
    async getOrders(orderIds, optionalParams) {
        const urlParams = optionalParams ? `?includeOptional=${optionalParams.join()}` : "";
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderIds.join()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(`${url}${urlParams}`, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Gets Sales Credit Orders
     * @param salesCreditIds - Sorted array of order ids
     * @returns SalesCreditInformation - Array of order information
     */
    async getSalesCredits(salesCreditIds) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: salesCreditIds.join()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.sales_credit.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(`${url}`, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postOrder(order) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.post}`, order, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Search Order Note
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    async searchOrderNotes(params) {
        if (params.orderId && Array.isArray(params.orderId)) {
            params.orderId = params.orderId.join();
        }
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.note.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async postOrderNote(orderId, note) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.note.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, note, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getOrderNote(orderId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.note.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postOrderRow(orderId, row) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.row.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, row, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getOrderStatus(orderStatusId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_STATUS_ID,
                value: orderStatusId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.status.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async putOrderStatus(orderId, orderStatusUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.status.put}`, elementsToReplace);
        await this.axios.put(url, orderStatusUpdate, { headers: this.getHeaders() });
    }
    /**
     * Gets contacts
     * @param contactIds - Sorted array of contact ids
     * @param optionalParams - Optionally pass in array of contact url params
     * @returns ContactInformation - Array of contact information
     */
    async getContacts(contactIds, optionalParams) {
        const urlParams = optionalParams ? `?includeOptional=${optionalParams.join()}` : "";
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_ID,
                value: contactIds.join()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(`${url}${urlParams}`, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Search contacts
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    async searchContacts(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async getWarehouses() {
        const elementsToReplace = [
            {
                key: Endpoints_1.WAREHOUSE_ID,
                value: ""
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getWarehouse(warehouseId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.WAREHOUSE_ID,
                value: warehouseId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postPostalAddress(addressInfo) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.postal_address.post}`, addressInfo, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async putPostalAddress(contactId, postalAddresses) {
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_ID,
                value: contactId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.postal_address.put}`, elementsToReplace);
        await this.axios.put(url, postalAddresses, { headers: this.getHeaders() });
    }
    async postContact(contactInfo) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.post}`, contactInfo, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getPostalAddress(postalAddress) {
        const postalAddresses = Array.isArray(postalAddress) ? postalAddress.join() : postalAddress.toString();
        const elementsToReplace = [
            {
                key: Endpoints_1.POSTAL_ADDRESS_ID,
                value: postalAddresses
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.postal_address.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postSalesOrder(order) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.sales.post}`, order, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postCustomerPayment(payment) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.customer_payment.post}`, payment, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async searchProducts(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async getProduct(productId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postProduct(product) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.post}`, product, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getReservation(orderId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.reservation.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async searchCustomerPayments(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.customer_payment.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async postReservation(orderProductDetails, orderId, warehouseId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            },
            {
                key: Endpoints_1.WAREHOUSE_ID,
                value: warehouseId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.reservation.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, orderProductDetails, { headers: this.getHeaders() });
        return httpResponse.data;
    }
    /**
     * Gets Sales Orders
     * @param saleOrderIds - Sorted array of sale order ids
     * @returns SalesOrderInformation - Array of sales order information
     */
    async getSalesOrders(saleOrderIds) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: saleOrderIds.join()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.sales.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postGoodsOutNote(orderId, goodsOutNotes) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.goods_out_note.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, goodsOutNotes, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async searchGoodsOutNotes(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.goods_out_note.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async getCustomFieldMetadata(orderType) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_TYPE,
                value: orderType
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.custom_field.custom_field_metadata.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getCustomFields(orderId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.custom_field.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data;
    }
    async patchCustomField(orderId, customFieldUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.custom_field.patch}`, elementsToReplace);
        const httpResponse = await this.axios.patch(url, customFieldUpdate, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getProductSupplier(productId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.supplier.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getPriceList(priceListId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRICE_LIST_ID,
                value: priceListId ? priceListId.toString() : ""
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.price_list.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getLeadSource(leadSourceId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.LEAD_SOURCE_ID,
                value: leadSourceId ? leadSourceId.toString() : ""
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.lead_source.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getProductChannel(productChannelId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_CHANNEL_ID,
                value: productChannelId ? productChannelId.toString() : ""
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.channel.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postStockCorrection(warehouseId, correction) {
        const elementsToReplace = [
            {
                key: Endpoints_1.WAREHOUSE_ID,
                value: warehouseId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.stock_correction.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, correction, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async getDefaultLocation(warehouseId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.WAREHOUSE_ID,
                value: warehouseId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.default_location.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    async postGoodsOutNoteEvents(goodsOutNoteId, goodsOutNoteEvents) {
        const elementsToReplace = [
            {
                key: Endpoints_1.GOODS_OUT_NOTE_ID,
                value: goodsOutNoteId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.goods_out_note.event.post}`, elementsToReplace);
        await this.axios.post(url, goodsOutNoteEvents, { headers: this.getHeaders() });
    }
    /**
     * Gets availability for specified product
     * @param productId - The ID of the product in question
     * @param optionalParams - Optionally pass in array of product availability url params
     * @returns ProductAvailability - Returns the availability of the specified product
     */
    async getProductAvailability(productId, optionalParams) {
        const urlParams = optionalParams ? `?includeOptional=${optionalParams.join()}` : "";
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.product_availability.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(`${url}${urlParams}`, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Fetches goods-out note object for specified goods out note ID
     * @param orderId - The ID of the order in question , optionally can even pass '*' which refer to all orders
     * @param goodsOutNoteId - The ID of the goods out note in question
     * @returns GoodsOutNoteInformation - Returns Goods Out Note information if it exists
     */
    async getGoodsOutNotes(orderId, goodsOutNoteId) {
        const goodsOutNoteIds = Array.isArray(goodsOutNoteId) ? goodsOutNoteId.join() : (goodsOutNoteId ? goodsOutNoteId.toString() : "");
        const orderIds = Array.isArray(orderId) ? orderId.join() : orderId.toString();
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: orderIds
            },
            {
                key: Endpoints_1.GOODS_OUT_NOTE_ID,
                value: goodsOutNoteIds
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.goods_out_note.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Updates shipment, labelUri field with the supplied option
     * @param goodsOutNoteId - The ID of the goods out note in question
     * @param goodsOutNoteUpdate - goodsOutNoteUpdate requests body
     * @returns void - A successful request returns void
     */
    async putGoodsOutNote(goodsOutNoteId, goodsOutNoteUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.GOODS_OUT_NOTE_ID,
                value: goodsOutNoteId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.goods_out_note.put}`, elementsToReplace);
        await this.axios.put(url, goodsOutNoteUpdate, { headers: this.getHeaders() });
    }
    /**
     * Retrieves all the Order Types configured in Brightpearl
     * @returns OrderTypes - Array of Order Types
     */
    async getOrderTypes() {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.order_type.get}`, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Retrieves shipping methods
     * @param shippingMethodId - Optionally define shippingMethodId to return either the full or refined list
     * @returns ShippingMethods - Array of shipping methods
     */
    async getShippingMethods(shippingMethodId) {
        const shippingMethod = shippingMethodId ? `/${shippingMethodId}` : "";
        const url = `${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.shipping_method.get}${shippingMethod}`;
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Fetches brand information for specific brand ID(s) or all the brands
     * @param brandId - Optionally define brandId(s) or none to return the brand information list
     * @returns BrandInfo - Array of brand(s) information
     */
    async getBrands(brandId) {
        const brand = Array.isArray(brandId) ? brandId.join() : (brandId ? brandId.toString() : "");
        const elementsToReplace = [
            {
                key: Endpoints_1.BRAND_ID,
                value: brand
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`{this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brand.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Searches brand information for matching brand ID or brand Name
     * @param params - Define the brandId or brandName to return the brand information list
     * @returns SearchResult - Array of all brands matching the search query parameter
     */
    async searchBrands(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brand.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    /**
     * Create a new brand with the given brand information
     * @param brandInfo - Define the name and description to be set for the new brand
     * @returns number - The brandId associated with the newly created brand
     */
    async postBrand(brandInfo) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brand.post}`, brandInfo, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Patch the communication fields for a given contact ID
     * @param contactId - Define the contact ID for which the patch is required
     * @param contactUpdate - Define the {op, path, value} array list of fields which requires patching
     */
    async patchContact(contactId, contactUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_ID,
                value: contactId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.patch}`, elementsToReplace);
        await this.axios.patch(url, contactUpdate, { headers: this.getHeaders() });
    }
    /**
     * Get the custom field meta data list allowed for contact based on contact type
     * @param contactType - The contact type for which the custom fields meta data list should be fetched
     * @returns CustomFieldMetadataInformation - List of custom field meta data information
     */
    async getContactCustomFieldMetadata(contactType) {
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_TYPE,
                value: contactType
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.custom_field.custom_field_metadata.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Get the currently associated custom fields and its values for a given contact
     * @param contactId - The contact ID for which the custom fields information list is to be fetched
     * @returns CustomFields - List of custom fields and its current values
     */
    async getContactCustomFields(contactId) {
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_ID,
                value: contactId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.custom_field.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Update the custom fields and its values for a given contact
     * @param contactId - The contact ID for which the custom fields information list is to be updated
     * @param customFieldUpdate - List of custom fields and new value to be updated
     * @returns customFields - List of all custom fields name and value after the update
     */
    async patchContactCustomField(contactId, customFieldUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.CONTACT_ID,
                value: contactId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.contact.custom_field.patch}`, elementsToReplace);
        const httpResponse = await this.axios.patch(url, customFieldUpdate, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Create a new warehouse with given information
     * @param warehouse - The warehouse information
     * @returns number - The warehouse ID of newly created warehouse
     */
    async postWarehouse(warehouse) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.post}`, warehouse, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Update existing warehouse(s) with given new information
     * @param warehouseList - The list of warehouse(s) and their corresponding information
     */
    async putWarehouse(warehouseList) {
        await this.axios.put(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.warehouse.put}`, warehouseList, { headers: this.getHeaders() });
    }
    /**
     * Update existing product with given information
     * @param productId - The product ID for which the new information is to be updated
     * @param product - The product's new information
     */
    async putProduct(productId, product) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.put}`, elementsToReplace);
        await this.axios.put(url, product, { headers: this.getHeaders() });
    }
    /**
     * Add the supplier(s) associated with the given product
     * @param productId - The product ID for which the supplier(s) need to be added
     * @param supplier - The list of all supplier(s) ID to asociate with the given product ID
     * @returns resourceErrorsAndStatuses - The status of each supplier addition to product
     * Note - The caller must check for the successful request based on the response data
     */
    async postProductSupplier(productId, supplier) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.supplier.post}`, elementsToReplace);
        const httpResponse = await this.axios.post(url, supplier, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Delete the supplier(s) associated with the given product
     * @param productId - The product ID for which the supplier(s) need to be deleted
     * @param params - The list of all supplier(s) ID to remove asociation with the given product ID
     * @returns resourceErrorsAndStatuses - The status of each supplier deletion to product
     * Note - The caller must check for the successful request based on the response data
     */
    async deleteProductSupplier(productId, params) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.supplier.delete}`, elementsToReplace);
        const httpResponse = await this.axios.delete(url, { headers: this.getHeaders(), data: params });
        return httpResponse.data.response;
    }
    /**
     * Search the brightpearl category list matching the query params
     * @param params - The query params for filtering the search results
     * @returns SearchResult - The brightpearl category list in the response
     */
    async searchProductBrightpearlCategory(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brightpearl_category.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    /**
     * Gets the brightpearl category for specified brightpearl category ID(s)
     * @param brightpearlCategoryId - The ID(s) of the brightpearl category in question
     * @returns BrightpearlCategory - List of all brightpearl category matching the request
     */
    async getBrightpearlCategory(brightpearlCategoryId) {
        const brightpearlCategory = Array.isArray(brightpearlCategoryId) ? brightpearlCategoryId.join() : (brightpearlCategoryId ? brightpearlCategoryId.toString() : "");
        const elementsToReplace = [
            {
                key: Endpoints_1.BRIGHTPEARL_CATEGORY_ID,
                value: brightpearlCategory
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brightpearl_category.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Create a new brightpearl category with the given brightpearl category information
     * @param brightpearlCategory - Define the name and parentId to be set for the new brightpearl category
     * @returns number - The brightpearl category ID associated with the newly created brightpearl category
     */
    async postBrightpearlCategory(brightpearlCategory) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.brightpearl_category.post}`, brightpearlCategory, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Search the product type list matching the query params
     * @param params - The query params for filtering the search results
     * @returns SearchResult - The product type list in the response
     */
    async searchProductType(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.product_type.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    /**
     * Gets the product type for specified product type ID(s)
     * @param productTypeId - The ID(s) of the product type in question
     * @returns ProductType - List of all product type matching the request
     */
    async getProductType(productTypeId) {
        const productType = Array.isArray(productTypeId) ? productTypeId.join() : (productTypeId ? productTypeId.toString() : "");
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_TYPE_ID,
                value: productType
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.product_type.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Create a new product type with the given product type information
     * @param productType - Define the name to be set for the new product type
     * @returns number - The product type ID associated with the newly created product type
     */
    async postProductType(productType) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.product_type.post}`, productType, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Get all or specified product price for specified product ID(s)
     * @param productId - The product ID(s) for which all price list(s) is to be fetched
     * @param productPriceId - The product price list ID(s) which is to be fetched
     * @returns ProductPrice - List of specified product(s) and corresponding price list(s)
     */
    async getProductPrice(productId, productPriceId) {
        const endpoint = (productPriceId ? Endpoints_1.ENDPOINTS.product.product_price.get : Endpoints_1.ENDPOINTS.product.product_price.get_all);
        const product = Array.isArray(productId) ? productId.join() : productId.toString();
        const productPrice = Array.isArray(productPriceId) ? productPriceId.join() : productPriceId;
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: product
            }
        ];
        if (productPriceId) {
            elementsToReplace.push({
                key: Endpoints_1.PRODUCT_PRICE_ID,
                value: productPrice.toString()
            });
        }
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${endpoint}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Update the product price list for specified product ID
     * @param productId - The product ID for which the price list is to be updated
     * @param productPriceList - The product price list which needs to be applied
     */
    async putProductPrice(productId, productPriceList) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.product_price.put}`, elementsToReplace);
        await this.axios.put(url, productPriceList, { headers: this.getHeaders() });
    }
    /**
     * Get the custom field meta data (list) allowed for product
     * @param customFieldMetadataId - The ID of custom field to be fetched. default - fetch all custom file meta data list
     * @returns CustomFieldMetadataInformation - List of custom field meta data information
     */
    async getProductCustomFieldMetadata(customFieldMetadataId) {
        const customFieldMetadata = Array.isArray(customFieldMetadataId) ? customFieldMetadataId.join() : (customFieldMetadataId ? customFieldMetadataId.toString() : "");
        const elementsToReplace = [
            {
                key: Endpoints_1.CUSTOM_FIELD_METADATA_ID,
                value: customFieldMetadata
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.custom_field.custom_field_metadata.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Update the custom fields and its values for a given product
     * @param productId - The product ID for which the custom fields information list is to be updated
     * @param customFieldUpdate - List of custom fields and new value to be updated
     * @returns customFields - List of all custom fields name and value after the update
     */
    async patchProductCustomField(productId, customFieldUpdate) {
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: productId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.custom_field.patch}`, elementsToReplace);
        const httpResponse = await this.axios.patch(url, customFieldUpdate, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Get the currently associated custom fields and its values for multiple products
     * @param productId - The product ID(s) for which the custom fields information list is to be fetched
     * @returns customFields - List of product ID(s) and list of custom fields and its current values
     */
    async getProductCustomField(productId) {
        const product = Array.isArray(productId) ? productId.join() : productId.toString();
        const elementsToReplace = [
            {
                key: Endpoints_1.PRODUCT_ID,
                value: product
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.product.product_custom_field.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Create an invoice for a sales order
     * @param salesInvoice - The sales invoice
     * @returns salesInvoiceId - The id of the sales invoice created
     */
    async postSalesInvoice(salesInvoice) {
        const httpResponse = await this.axios.post(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.invoice.sales.post}`, salesInvoice, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    /**
     * Search currencies
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    async searchCurrencies(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.currency.search}`, {
            headers: this.getHeaders(), params
        });
        return httpResponse.data;
    }
    /**
     * Start the invoicing process of a sales order
     * @param salesOrderId - Sales order id
     * @param salesOrderCloseRequest - Optionally override the current taxDate of the associated sales invoice
     * @returns void - A successful request returns void
     */
    async postSalesOrderClose(salesOrderId, salesOrderCloseRequest) {
        const payload = salesOrderCloseRequest ? salesOrderCloseRequest : {};
        const elementsToReplace = [
            {
                key: Endpoints_1.ORDER_ID,
                value: salesOrderId.toString()
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.order.sales.close.post}`, elementsToReplace);
        await this.axios.post(url, payload, { headers: this.getHeaders() });
    }
    async searchPaymentMethod(params) {
        const httpResponse = await this.axios.get(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.payment.search}`, { headers: this.getHeaders(), params });
        return httpResponse.data;
    }
    async getPaymentMethod(paymentMethodId) {
        const paymentMethodIds = Array.isArray(paymentMethodId) ? paymentMethodId.join() : (paymentMethodId ? paymentMethodId.toString() : "");
        const elementsToReplace = [
            {
                key: Endpoints_1.PAYMENT_METHOD_ID,
                value: paymentMethodIds
            }
        ];
        const url = urlHelper_1.UrlHelper.getUrl(`${this.baseUrl}/${Endpoints_1.ENDPOINTS.accounting.payment.get}`, elementsToReplace);
        const httpResponse = await this.axios.get(url, { headers: this.getHeaders() });
        return httpResponse.data.response;
    }
    getHeaders() {
        return this.clientParams.headers;
    }
}
exports.BrightpearlClient = BrightpearlClient;
//# sourceMappingURL=BrightpearlClient.js.map