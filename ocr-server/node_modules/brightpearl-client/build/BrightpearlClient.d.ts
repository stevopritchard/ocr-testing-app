import { AxiosInstance } from "axios";
import { AllOrders, AttributeMap, BrandInfo, BrandSearchParams, BrightpearlCategory, BrightpearlCategoryInfo, BrightpearlCategorySearchParams, BrightpearlClientParams, ContactDetails, ContactInfo, ContactPostalAddress, ContactSearchParams, ContactUpdate, ContactUrlParams, CurrencySearchParams, CustomerPayment, CustomerPaymentSearchParams, CustomFieldMetadataInformation, CustomFields, CustomFieldUpdate, GoodsOutNote, GoodsOutNoteEvents, GoodsOutNoteInformation, GoodsOutNoteSearchParams, GoodsOutNoteUpdate, LeadSource, Order, OrderInformation, OrderNote, OrderNoteSearchParams, OrderRow, OrdersSearchParams, OrderStatusInfo, OrderStatusUpdate, OrderTypeInfo, OrderUrlParams, PaymentMethod, PaymentMethodSearchParams, PostalAddress, PriceList, Product, ProductAvailability, ProductAvailabilityUrlParams, ProductChannel, ProductInfo, ProductPrice, ProductPriceList, ProductSearchParams, ProductType, ResourceErrorsAndStatuses, Response, SalesCreditInformation, SalesInvoice, SalesOrder, SalesOrderClose, SalesOrderInformation, SearchResult, ShippingMethod, StockCorrections, StockReservation, Warehouse, WarehouseInformation, WarehouseList, WarehouseStockReservation } from "./IBrightpearlClient";
declare class BrightpearlClient {
    private axios;
    private clientParams;
    private readonly requestHelper;
    readonly baseUrl: string;
    constructor(axios: AxiosInstance, clientParams: BrightpearlClientParams);
    /**
     * Search Purchase & Sales Orders
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    searchOrders(params: OrdersSearchParams): Promise<SearchResult>;
    /**
     * Gets Purchase & Sales Orders
     * @param orderIds - Sorted array of order ids
     * @param optionalParams - Optionally pass in array of order url params
     * @returns OrderInformation - Array of order information
     */
    getOrders(orderIds: number[], optionalParams?: OrderUrlParams[]): Promise<OrderInformation[]>;
    /**
     * Gets Sales Credit Orders
     * @param salesCreditIds - Sorted array of order ids
     * @returns SalesCreditInformation - Array of order information
     */
    getSalesCredits(salesCreditIds: number[]): Promise<SalesCreditInformation[]>;
    postOrder(order: Order): Promise<number>;
    /**
     * Search Order Note
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    searchOrderNotes(params: OrderNoteSearchParams): Promise<SearchResult>;
    postOrderNote(orderId: number, note: OrderNote): Promise<number>;
    getOrderNote(orderId: number): Promise<OrderNote[]>;
    postOrderRow(orderId: number, row: OrderRow): Promise<number>;
    getOrderStatus(orderStatusId: number): Promise<OrderStatusInfo[]>;
    putOrderStatus(orderId: number, orderStatusUpdate: OrderStatusUpdate): Promise<void>;
    /**
     * Gets contacts
     * @param contactIds - Sorted array of contact ids
     * @param optionalParams - Optionally pass in array of contact url params
     * @returns ContactInformation - Array of contact information
     */
    getContacts(contactIds: number[], optionalParams?: ContactUrlParams[]): Promise<ContactInfo[]>;
    /**
     * Search contacts
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    searchContacts(params: ContactSearchParams): Promise<SearchResult>;
    getWarehouses(): Promise<WarehouseInformation[]>;
    getWarehouse(warehouseId: number): Promise<WarehouseInformation[]>;
    postPostalAddress(addressInfo: PostalAddress): Promise<number>;
    putPostalAddress(contactId: number, postalAddresses: ContactPostalAddress[]): Promise<void>;
    postContact(contactInfo: ContactDetails): Promise<number>;
    getPostalAddress(postalAddress: number | number[]): Promise<PostalAddress[]>;
    postSalesOrder(order: SalesOrder): Promise<number>;
    postCustomerPayment(payment: CustomerPayment): Promise<number>;
    searchProducts(params: ProductSearchParams): Promise<SearchResult>;
    getProduct(productId: number): Promise<ProductInfo[]>;
    postProduct(product: Product): Promise<number>;
    getReservation(orderId: number): Promise<WarehouseStockReservation[]>;
    searchCustomerPayments(params: CustomerPaymentSearchParams): Promise<SearchResult>;
    postReservation(orderProductDetails: StockReservation, orderId: number, warehouseId: number): Promise<object>;
    /**
     * Gets Sales Orders
     * @param saleOrderIds - Sorted array of sale order ids
     * @returns SalesOrderInformation - Array of sales order information
     */
    getSalesOrders(saleOrderIds: number[]): Promise<SalesOrderInformation[]>;
    postGoodsOutNote(orderId: number, goodsOutNotes: GoodsOutNote): Promise<number[]>;
    searchGoodsOutNotes(params: GoodsOutNoteSearchParams): Promise<SearchResult>;
    getCustomFieldMetadata(orderType: string): Promise<CustomFieldMetadataInformation[]>;
    getCustomFields(orderId: number): Promise<Response<CustomFields>>;
    patchCustomField<T>(orderId: number, customFieldUpdate: Array<CustomFieldUpdate<T>>): Promise<CustomFields>;
    getProductSupplier(productId: number): Promise<AttributeMap<number[]>>;
    getPriceList(priceListId?: number): Promise<PriceList[]>;
    getLeadSource(leadSourceId?: number): Promise<LeadSource[]>;
    getProductChannel(productChannelId?: number): Promise<ProductChannel[]>;
    postStockCorrection(warehouseId: number, correction: StockCorrections): Promise<number[]>;
    getDefaultLocation(warehouseId: number): Promise<number>;
    postGoodsOutNoteEvents(goodsOutNoteId: number, goodsOutNoteEvents: GoodsOutNoteEvents): Promise<void>;
    /**
     * Gets availability for specified product
     * @param productId - The ID of the product in question
     * @param optionalParams - Optionally pass in array of product availability url params
     * @returns ProductAvailability - Returns the availability of the specified product
     */
    getProductAvailability(productId: number, optionalParams?: ProductAvailabilityUrlParams[]): Promise<ProductAvailability>;
    /**
     * Fetches goods-out note object for specified goods out note ID
     * @param orderId - The ID of the order in question , optionally can even pass '*' which refer to all orders
     * @param goodsOutNoteId - The ID of the goods out note in question
     * @returns GoodsOutNoteInformation - Returns Goods Out Note information if it exists
     */
    getGoodsOutNotes(orderId: number | number[] | AllOrders, goodsOutNoteId?: number | number[]): Promise<AttributeMap<GoodsOutNoteInformation>>;
    /**
     * Updates shipment, labelUri field with the supplied option
     * @param goodsOutNoteId - The ID of the goods out note in question
     * @param goodsOutNoteUpdate - goodsOutNoteUpdate requests body
     * @returns void - A successful request returns void
     */
    putGoodsOutNote(goodsOutNoteId: number, goodsOutNoteUpdate: GoodsOutNoteUpdate): Promise<void>;
    /**
     * Retrieves all the Order Types configured in Brightpearl
     * @returns OrderTypes - Array of Order Types
     */
    getOrderTypes(): Promise<OrderTypeInfo[]>;
    /**
     * Retrieves shipping methods
     * @param shippingMethodId - Optionally define shippingMethodId to return either the full or refined list
     * @returns ShippingMethods - Array of shipping methods
     */
    getShippingMethods(shippingMethodId?: number): Promise<ShippingMethod[]>;
    /**
     * Fetches brand information for specific brand ID(s) or all the brands
     * @param brandId - Optionally define brandId(s) or none to return the brand information list
     * @returns BrandInfo - Array of brand(s) information
     */
    getBrands(brandId?: number | number[]): Promise<BrandInfo[]>;
    /**
     * Searches brand information for matching brand ID or brand Name
     * @param params - Define the brandId or brandName to return the brand information list
     * @returns SearchResult - Array of all brands matching the search query parameter
     */
    searchBrands(params: BrandSearchParams): Promise<SearchResult>;
    /**
     * Create a new brand with the given brand information
     * @param brandInfo - Define the name and description to be set for the new brand
     * @returns number - The brandId associated with the newly created brand
     */
    postBrand(brandInfo: BrandInfo): Promise<number>;
    /**
     * Patch the communication fields for a given contact ID
     * @param contactId - Define the contact ID for which the patch is required
     * @param contactUpdate - Define the {op, path, value} array list of fields which requires patching
     */
    patchContact<T>(contactId: number, contactUpdate: Array<ContactUpdate<T>>): Promise<void>;
    /**
     * Get the custom field meta data list allowed for contact based on contact type
     * @param contactType - The contact type for which the custom fields meta data list should be fetched
     * @returns CustomFieldMetadataInformation - List of custom field meta data information
     */
    getContactCustomFieldMetadata(contactType: string): Promise<CustomFieldMetadataInformation[]>;
    /**
     * Get the currently associated custom fields and its values for a given contact
     * @param contactId - The contact ID for which the custom fields information list is to be fetched
     * @returns CustomFields - List of custom fields and its current values
     */
    getContactCustomFields(contactId: number): Promise<CustomFields>;
    /**
     * Update the custom fields and its values for a given contact
     * @param contactId - The contact ID for which the custom fields information list is to be updated
     * @param customFieldUpdate - List of custom fields and new value to be updated
     * @returns customFields - List of all custom fields name and value after the update
     */
    patchContactCustomField<T>(contactId: number, customFieldUpdate: Array<CustomFieldUpdate<T>>): Promise<CustomFields>;
    /**
     * Create a new warehouse with given information
     * @param warehouse - The warehouse information
     * @returns number - The warehouse ID of newly created warehouse
     */
    postWarehouse(warehouse: Warehouse): Promise<number>;
    /**
     * Update existing warehouse(s) with given new information
     * @param warehouseList - The list of warehouse(s) and their corresponding information
     */
    putWarehouse(warehouseList: WarehouseList): Promise<void>;
    /**
     * Update existing product with given information
     * @param productId - The product ID for which the new information is to be updated
     * @param product - The product's new information
     */
    putProduct(productId: number, product: Product): Promise<void>;
    /**
     * Add the supplier(s) associated with the given product
     * @param productId - The product ID for which the supplier(s) need to be added
     * @param supplier - The list of all supplier(s) ID to asociate with the given product ID
     * @returns resourceErrorsAndStatuses - The status of each supplier addition to product
     * Note - The caller must check for the successful request based on the response data
     */
    postProductSupplier(productId: number, supplier: number[]): Promise<ResourceErrorsAndStatuses>;
    /**
     * Delete the supplier(s) associated with the given product
     * @param productId - The product ID for which the supplier(s) need to be deleted
     * @param params - The list of all supplier(s) ID to remove asociation with the given product ID
     * @returns resourceErrorsAndStatuses - The status of each supplier deletion to product
     * Note - The caller must check for the successful request based on the response data
     */
    deleteProductSupplier(productId: number, params: number[]): Promise<ResourceErrorsAndStatuses>;
    /**
     * Search the brightpearl category list matching the query params
     * @param params - The query params for filtering the search results
     * @returns SearchResult - The brightpearl category list in the response
     */
    searchProductBrightpearlCategory(params: BrightpearlCategorySearchParams): Promise<SearchResult>;
    /**
     * Gets the brightpearl category for specified brightpearl category ID(s)
     * @param brightpearlCategoryId - The ID(s) of the brightpearl category in question
     * @returns BrightpearlCategory - List of all brightpearl category matching the request
     */
    getBrightpearlCategory(brightpearlCategoryId: number | number[]): Promise<BrightpearlCategoryInfo[]>;
    /**
     * Create a new brightpearl category with the given brightpearl category information
     * @param brightpearlCategory - Define the name and parentId to be set for the new brightpearl category
     * @returns number - The brightpearl category ID associated with the newly created brightpearl category
     */
    postBrightpearlCategory(brightpearlCategory: BrightpearlCategory): Promise<number>;
    /**
     * Search the product type list matching the query params
     * @param params - The query params for filtering the search results
     * @returns SearchResult - The product type list in the response
     */
    searchProductType(params: ProductType): Promise<SearchResult>;
    /**
     * Gets the product type for specified product type ID(s)
     * @param productTypeId - The ID(s) of the product type in question
     * @returns ProductType - List of all product type matching the request
     */
    getProductType(productTypeId: number | number[]): Promise<ProductType[]>;
    /**
     * Create a new product type with the given product type information
     * @param productType - Define the name to be set for the new product type
     * @returns number - The product type ID associated with the newly created product type
     */
    postProductType(productType: ProductType): Promise<number>;
    /**
     * Get all or specified product price for specified product ID(s)
     * @param productId - The product ID(s) for which all price list(s) is to be fetched
     * @param productPriceId - The product price list ID(s) which is to be fetched
     * @returns ProductPrice - List of specified product(s) and corresponding price list(s)
     */
    getProductPrice(productId: number | number[], productPriceId?: number | number[]): Promise<ProductPrice[]>;
    /**
     * Update the product price list for specified product ID
     * @param productId - The product ID for which the price list is to be updated
     * @param productPriceList - The product price list which needs to be applied
     */
    putProductPrice(productId: number, productPriceList: ProductPriceList): Promise<void>;
    /**
     * Get the custom field meta data (list) allowed for product
     * @param customFieldMetadataId - The ID of custom field to be fetched. default - fetch all custom file meta data list
     * @returns CustomFieldMetadataInformation - List of custom field meta data information
     */
    getProductCustomFieldMetadata(customFieldMetadataId: number | number[]): Promise<CustomFieldMetadataInformation[]>;
    /**
     * Update the custom fields and its values for a given product
     * @param productId - The product ID for which the custom fields information list is to be updated
     * @param customFieldUpdate - List of custom fields and new value to be updated
     * @returns customFields - List of all custom fields name and value after the update
     */
    patchProductCustomField<T>(productId: number, customFieldUpdate: Array<CustomFieldUpdate<T>>): Promise<CustomFields>;
    /**
     * Get the currently associated custom fields and its values for multiple products
     * @param productId - The product ID(s) for which the custom fields information list is to be fetched
     * @returns customFields - List of product ID(s) and list of custom fields and its current values
     */
    getProductCustomField(productId: number | number[]): Promise<AttributeMap<CustomFields>>;
    /**
     * Create an invoice for a sales order
     * @param salesInvoice - The sales invoice
     * @returns salesInvoiceId - The id of the sales invoice created
     */
    postSalesInvoice(salesInvoice: SalesInvoice): Promise<number>;
    /**
     * Search currencies
     * @param params - Search params
     * @returns SearchResult - Result of the search with meta data
     */
    searchCurrencies(params?: CurrencySearchParams): Promise<SearchResult>;
    /**
     * Start the invoicing process of a sales order
     * @param salesOrderId - Sales order id
     * @param salesOrderCloseRequest - Optionally override the current taxDate of the associated sales invoice
     * @returns void - A successful request returns void
     */
    postSalesOrderClose(salesOrderId: number, salesOrderCloseRequest?: SalesOrderClose): Promise<void>;
    searchPaymentMethod(params: PaymentMethodSearchParams): Promise<SearchResult>;
    getPaymentMethod(paymentMethodId?: number | number[]): Promise<PaymentMethod[]>;
    private getHeaders;
}
export { BrightpearlClient };
