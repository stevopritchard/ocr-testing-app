import { BrightpearlClient } from "./BrightpearlClient";
import { CustomFieldMetadataInformation, CustomFieldOperation, CustomFieldUpdate, CustomFieldUpdateOptionSelection, OrderType } from "./IBrightpearlClient";
declare class CustomField {
    private bpClient;
    private cacheMetaDataLookup;
    private customFieldMetadataInformation;
    constructor(bpClient: BrightpearlClient, cacheMetaDataLookup: boolean);
    /**
     * Builds the request body for updating a Freeform custom field
     * @param fieldCode - The code of the custom field you want to target
     * @param value - The value you want to assign to the custom field
     * @param operation - The type of operation you want to perform on the custom field
     * @returns CustomFieldUpdate - Request body to update a Freeform custom field
     */
    buildFreeformRequest<T>(fieldCode: string, value: T, operation: CustomFieldOperation): CustomFieldUpdate<T>;
    /**
     * Finds specified Select List option in options HashMap and builds the request body for updating a Select List custom field
     * @param customFieldMetadata - The field which contains the HashMap of Select List options
     * @param selectListOptionName - The option name you wish to use
     * @param operation - The type of operation you want to perform on the custom field
     * @returns CustomFieldUpdate - Request body to update a Select List custom field
     */
    buildSelectListRequest(customFieldMetadata: CustomFieldMetadataInformation, selectListOptionName: string, operation: CustomFieldOperation): CustomFieldUpdate<CustomFieldUpdateOptionSelection>;
    /**
     * Updates a single Freeform custom field with the supplied value
     * @param orderId - The ID of the order in question
     * @param fieldName - The name of the custom field you want to target
     * @param value - The value you want to assign to the custom field
     * @param orderType - The type of order in question
     * @param operation - The type of operation you want to perform on the custom field
     * @returns void - A successful request returns void
     */
    updateSingleFreeformField<T>(orderId: number, fieldName: string, value: T, orderType: OrderType, operation: CustomFieldOperation): Promise<void>;
    /**
     * Updates a single Select List custom field with the supplied option
     * @param orderId - The ID of the order in question
     * @param fieldName - The name of the custom field you want to target
     * @param selectListOptionName - The option name you wish to use
     * @param orderType - The type of order in question
     * @param operation - The type of operation you want to perform on the custom field
     * @returns void - A successful request returns void
     */
    updateSingleSelectListField(orderId: number, fieldName: string, selectListOptionName: string, orderType: OrderType, operation: CustomFieldOperation): Promise<void>;
    /**
     * Updates a single Select List custom field with the supplied option
     * @param orderId - The ID of the order in question
     * @param request - Array of CustomFieldUpdate requests
     * @returns void - A successful request returns void
     */
    update<T>(orderId: number, request: Array<CustomFieldUpdate<T>>): Promise<void>;
    /**
     * Fetches all custom fields for specified order type and finds the one that corresponds to supplied field name
     * @param fieldName - The name of the custom field you want to target
     * @param orderType - The type of order in question
     * @returns CustomFieldMetadataInformation - Returns Custom Field Metadata if it exists
     */
    find(fieldName: string, orderType: OrderType): Promise<CustomFieldMetadataInformation>;
    /**
     * Fetches all custom fields for specified order type
     * @param orderType - The type of order in question
     * @returns Array of CustomFieldMetadataInformation - Returns all custom field metadata
     */
    getMetadata(orderType: OrderType): Promise<CustomFieldMetadataInformation[]>;
    private getCustomFields;
    private getCachedCustomFields;
}
export { CustomField };
