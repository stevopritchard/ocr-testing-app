interface Currency {
    orderCurrencyCode?: string;
    code?: string;
    exchangeRate?: string;
    fixedExchangeRate?: boolean;
}
interface Address {
    contactId?: number;
    addressFullName?: string;
    companyName?: string;
    addressLine1: string;
    addressLine2?: string;
    postalCode?: string;
    countryIsoCode: string;
    country: string;
    telephone?: string;
    email?: string;
    addressLine3?: string;
    addressLine4?: string;
    mobileTelephone?: string;
    deliveryDate?: string;
    shippingMethodId?: number;
}
interface SalesOrderDelivery {
    date?: string;
    address?: Address;
    shippingMethodId?: number;
}
interface SalesOrderRow {
    productId?: number;
    name?: string;
    quantity: string;
    taxCode: string;
    tax: string;
    net: string;
    nominalCode?: string;
    sequence?: number;
}
interface SalesOrderRowResponse {
    id: number;
    productId: number;
    name: string;
    sku: string;
    quantity: string;
    taxCode: string;
    tax: string;
    net: string;
    nominalCode: string;
    productPrice: string;
    discountPercentage: string;
    sequence: number;
    bundleChild: boolean;
    bundleParent: boolean;
    parentRowId: number;
}
interface SalesOrder {
    customer: Address;
    billing?: {
        contactId?: number;
        address?: Address;
    };
    ref?: string;
    placedOn?: string;
    taxDate?: string;
    parentId?: string;
    statusId?: number;
    externalRef?: string;
    installedIntegrationInstanceId?: number;
    staffOwnerId?: number;
    projectId?: number;
    leadSourceId?: number;
    teamId?: number;
    priceListId?: number;
    priceModeCode?: string;
    warehouseId?: number;
    channelId?: number;
    currency: Currency;
    delivery?: SalesOrderDelivery;
    rows: SalesOrderRow[];
}
interface Response<T> {
    response: T;
}
interface Column {
    name: string;
    sortable: boolean;
    filterable: boolean;
    reportDataType: string;
    referenceData: any[];
    isFreeTextSearchable: boolean;
    required: boolean;
}
interface MetaData {
    morePagesAvailable: boolean;
    resultsAvailable: number;
    resultsReturned: number;
    firstResult: number;
    lastResult: number;
    columns: Column[];
    sorting: object[];
}
interface SearchResult {
    response: {
        results: any[][];
        metaData: MetaData;
    };
    reference: any;
}
declare enum PostalAddressTypes {
    DEFAULT = "DEF",
    BILLING = "BIL",
    DELIVERY = "DEL"
}
interface PostAddressIds {
    [PostalAddressTypes.DEFAULT]: number;
    [PostalAddressTypes.BILLING]: number;
    [PostalAddressTypes.DELIVERY]: number;
}
interface ContactPostalAddress {
    postalAddressId: number;
    type?: PostalAddressTypes;
}
interface Email {
    email: string;
}
interface Emails {
    PRI?: Email;
    SEC?: Email;
    TER?: Email;
}
interface Telephones {
    PRI: string;
}
interface Communication {
    emails: Emails;
    telephones: Telephones;
    messagingVoips?: {
        SKP: string;
    };
    websites?: {
        PRI: string;
    };
}
interface Current {
    contactStatusId?: number;
    staffOwnerContactId?: number;
    leadSourceId?: number;
    accountReference?: string;
    channelId?: number;
    projectId?: number;
    teamId?: number;
}
interface ContactStatus {
    current: Current;
}
interface RelationshipToAccount {
    isSupplier: boolean;
    isStaff: boolean;
}
interface MarketingDetails {
    isReceiveEmailNewsletter: boolean;
}
interface FinancialDetails {
    priceListId: number;
    creditLimit: number;
    creditTermDays: number;
    currencyId: number;
    discountPercentage: number;
    creditTermTypeId: number;
}
interface Assignment {
    current: Current;
}
interface Organisation {
    organisationId?: number;
    name: string;
}
interface ContactInfo {
    contactId: number;
    isPrimaryContact: boolean;
    salutation: string;
    firstName: string;
    lastName: string;
    postAddressIds: PostAddressIds;
    communication: Communication;
    contactStatus: ContactStatus;
    relationshipToAccount: RelationshipToAccount;
    marketingDetails: MarketingDetails;
    financialDetails: FinancialDetails;
    assignment: Assignment;
    organisation?: Organisation;
    tradeStatus: string;
    createdByid: number;
    createdOn: Date;
    updatedOn: Date;
    contactTags: string;
    aliases: any;
    customFields?: CustomFields;
    postalAddresses?: AttributeMap<PostalAddress>;
}
interface Pagination {
    morePagesAvailable: boolean;
    resultsReturned: number;
    firstResult: number;
    lastResult: number;
}
interface WarehouseAddress {
    addressId: number;
    customerId: number;
    streetAddress: string;
    postcode: string;
    city: string;
    state: string;
    countryId: number;
    countryIsoCode2: string;
}
interface WarehouseInformation {
    id: number;
    name: string;
    typeCode: string;
    logisticsName: string;
    typeDescription: string;
    address: WarehouseAddress;
    clickAndCollectEnabled: boolean;
    weeklyOperatingPeriods: any;
}
interface WarehouseStockReservation {
    orderId: number;
    warehouseId: number;
    orderRows: object;
}
interface PostalAddress {
    contactId?: number;
    addressId?: number;
    addressLine1: string;
    addressLine2?: string;
    addressLine3?: string;
    addressLine4?: string;
    postalCode: string;
    countryIsoCode?: string;
    countryId?: string;
}
declare enum PaymentType {
    AUTH = "AUTH",
    CAPTURE = "CAPTURE",
    PAYMENT = "PAYMENT",
    RECEIPT = "RECEIPT",
    VOID = "VOID"
}
interface CustomerPayment {
    transactionRef?: string;
    transactionCode?: string;
    exchangeRate?: number;
    amountAuthorized?: number;
    authorizationExpiry?: string;
    journalId?: number;
    journalRef?: string;
    paymentMethodCode: string;
    paymentType: PaymentType;
    orderId: number;
    currencyIsoCode: string;
    amountPaid?: number;
    paymentDate: string;
}
interface ContactDetails {
    salutation: string;
    firstName: string;
    lastName: string;
    postAddressIds: PostAddressIds;
    communication?: Communication;
    contactStatus?: ContactStatus;
    relationshipToAccount?: RelationshipToAccount;
    marketingDetails?: MarketingDetails;
    financialDetails?: {
        priceListId?: number;
        taxCodeId?: number;
        creditLimit?: string;
        creditTermDays?: number;
        discountPercentage?: number;
        taxNumber?: string;
    };
    assignment?: Assignment;
    organisation?: Organisation;
}
interface OrderProductInfo {
    productId: number;
    salesOrderRowId: string;
    quantity: string;
}
interface ProductInfo {
    id: number;
    brandId: number;
    collectionId: number;
    productTypeId: number;
    identity: ProductIdentity;
    featured: boolean;
    stock: ProductStockInfo;
    financialDetails: ProductFinancialDetails;
    salesChannels: SalesChannel[];
    composition: Composition;
    createdOn: string;
    updatedOn: string;
    warehouses: object;
    nominalCodeStock: string;
    nominalCodePurchases: string;
    nominalCodeSales: string;
    seasonIds: number[];
    reporting: object;
    status: string;
    salesPopupMessage: string;
    warehousePopupMessage: string;
}
interface ProductStockInfo {
    stockTracked: boolean;
    weight: {
        magnitude: number;
    };
    dimensions: {
        length: number;
        height: number;
        width: number;
        volume?: number;
    };
}
interface ProductIdentity {
    sku: string;
    ean: string;
    upc: string;
    isbn: string;
    barcode: string;
    mpn: string;
}
interface ProductFinancialDetails {
    taxable: boolean;
    taxCode?: {
        id: number;
        code?: string;
    };
}
interface Product {
    brandId: number;
    collectionId?: number;
    productTypeId?: number;
    identity?: ProductIdentity;
    stock?: ProductStockInfo;
    financialDetails: ProductFinancialDetails;
    salesChannels: SalesChannel[];
    variations?: Variation[];
    seasonIds?: number[];
}
interface Variation {
    optionId: number;
    optionValueId: number;
}
interface Composition {
    bundle: boolean;
    bundleComponents: BundleComponents[];
}
interface BundleComponents {
    productId: number;
    productQuantity: number;
}
interface SalesChannel {
    salesChannelName: string;
    productName: string;
    productCondition?: string;
    categories: Category[];
    description: Description;
    shortDescription?: Description;
}
interface Description {
    languageCode: string;
    text: string;
    format: string;
}
interface Category {
    categoryCode: string;
}
interface StockReservation {
    products: OrderProductInfo[];
}
interface SalesOrderTotal {
    net: string;
    tax: string;
    gross: string;
    baseNet: string;
    baseTax: string;
    baseGross: string;
}
interface OrderTotal {
    net: string;
    taxAmount: string;
    baseNet: string;
    baseTaxAmount: string;
    baseTotal: string;
    total: string;
}
interface SalesOrderInformation {
    id: number;
    customer: Address;
    billing: Address;
    ref: string;
    externalRef: string;
    placedOn: string;
    taxDate: string;
    parentId: number;
    statusId: number;
    warehouseId: number;
    channelId: number;
    staffOwnerId: number;
    projectId: number;
    leadSourceId: number;
    teamId: number;
    priceListId: number;
    priceModeCode: string;
    currency: Currency;
    delivery: SalesOrderDelivery;
    rows: SalesOrderRowResponse[];
    total: SalesOrderTotal;
    stockStatusCode: string;
    createdBy: number;
    createdOn: string;
    updatedOn: string;
    customerId: number;
}
interface OrderInformation {
    id: number;
    parentOrderId: number;
    orderTypeCode: OrderTypeCode;
    reference: string;
    version: number;
    state: {
        tax: string;
    };
    tax: {
        errors: any[];
    };
    acknowledged: number;
    orderStatus: {
        orderStatusId: number;
        name: string;
    };
    orderPaymentStatus: string;
    stockStatusCode: string;
    allocationStatusCode: string;
    shippingStatusCode: string;
    placedOn: string;
    createdOn: string;
    updatedOn: string;
    closedOn: string;
    createdById: number;
    priceListId: number;
    priceModeCode: string;
    delivery: {
        deliveryDate: Date;
        shippingMethodId: number;
    };
    invoices: OrderInfoInvoice[];
    currency: Currency;
    totalValue: OrderTotal;
    assignment: Assignment;
    parties: Parties;
    orderRows: AttributeMap<OrderInformationRow>;
    warehouseId: number;
    costPriceListId: number;
    historicalOrder: boolean;
    isDropship: boolean;
    customFields: CustomFields;
    externalRef: string;
}
declare type CustomFields = AttributeMap<string | number | boolean | CustomFieldDropDownList>;
interface CustomFieldDropDownList {
    id: number;
    value: string;
}
interface AttributeMap<T> {
    [index: string]: T;
}
interface Cost {
    currencyCode: string;
    value: string;
}
interface OrderInformationRowValue {
    taxRate: string;
    taxCode: string;
    taxCalculator: string;
    rowNet: Cost;
    rowTax: Cost;
    taxClassId: number;
}
interface OrderNote {
    noteId?: number;
    contactId?: number;
    text: string;
    isPublic?: boolean;
    addedOn?: string;
    addedBy?: number;
    orderStatusId?: number;
    fileId?: number;
}
interface OrderInformationComposition {
    bundleParent: boolean;
    bundleChild: boolean;
    parentOrderRowId: number;
}
interface OrderInformationRow {
    orderRowSequence: string;
    productId: number;
    productName: string;
    productSku: string;
    quantity: Quantity;
    itemCost: Cost;
    productPrice?: Cost;
    discountPercentage: string;
    rowValue: OrderInformationRowValue;
    nominalCode: string;
    composition: OrderInformationComposition;
}
interface OrderInfoInvoice extends Invoice {
    invoiceReference: string;
    dueDate: Date;
}
interface ContactSearchParams {
    contactId?: number;
    primaryEmail?: string;
    secondaryEmail?: string;
    tertiaryEmail?: string;
    firstName?: string;
    lastName?: string;
    isSupplier?: boolean;
    companyName?: string;
    isStaff?: boolean;
    isCustomer?: boolean;
    createdOn?: string;
    updatedOn?: string;
    lastContactedOn?: string;
    lastOrderedOn?: string;
    nominalCode?: number;
    isPrimary?: boolean;
    pri?: string;
    sec?: string;
    mob?: string;
}
interface OrderNoteSearchParams {
    orderId?: number | number[] | string;
    noteId?: string;
    contactId?: string;
    noteText?: string;
    isPublic?: boolean;
    dateAdded?: string;
    addedBy?: boolean;
    orderStatusId?: string;
}
interface ProductSearchParams {
    productId?: number;
    productName?: string;
    SKU?: string;
    barcode?: string;
    EAN?: string;
    UPC?: string;
    ISBN?: string;
    MPN?: string;
    stockTracked?: boolean;
    salesChannelName?: string;
    createdOn?: string;
    updatedOn?: string;
    brightPearlCategoryCode?: number;
    productGroupId?: number;
    brandId?: number;
    productTypeId?: number;
    productStatus?: string;
    primarySupplierId?: number;
}
interface CustomerPaymentSearchParams {
    paymentId?: number;
    transactionRef?: string;
    transactionCode?: string;
    paymentMethodCode?: string;
    paymentType?: string;
    orderId?: number;
    currencyId?: number;
    currencyCode?: string;
    amountAuthorized?: string;
    amountPaid?: string;
    expires?: string;
    paymentDate?: string;
    createdOn?: string;
    journalId?: number;
}
interface BrightpearlClientParams {
    dataCenter: string;
    account: string;
    headers: PrivateAppHeaders | PublicAppHeaders;
    publicAppCredentials?: PublicAppCredentials;
}
interface PublicAppCredentials {
    clientId: string;
    clientSecret: string;
    refreshToken: string;
}
interface PublicAppHeaders {
    "brightpearl-dev-ref": string;
    "brightpearl-app-ref": string;
}
interface PrivateAppHeaders {
    "brightpearl-app-ref": string;
    "brightpearl-account-token": string;
}
interface RefreshTokenResponse {
    access_token: string;
    token_type: string;
    expires_in: number;
    refresh_token: string;
    api_domain: string;
}
interface OrdersSearchParams extends PaginationParams {
    orderId?: number;
    orderTypeId?: number;
    contactId?: number;
    orderStatusId?: number;
    orderStockStatusId?: number;
    createdOn?: string;
    createdById?: number;
    customerRef?: string;
    orderPaymentStatusId?: number;
    updatedOn?: number;
    parentOrderId?: number | number[] | string;
    orderShippingStatusId?: number;
    externalRef?: string;
    installedIntegrationInstanceId?: number;
    warehouseId?: number;
    staffOwnerContactId?: number;
    taxDate?: string;
}
interface GoodsOutNoteSearchParams extends PaginationParams {
    goodsOutNoteId?: number;
    printed?: boolean;
    picked?: boolean;
    packed?: boolean;
    shipped?: boolean;
    shippedOn?: string;
    orderId?: number;
    shippingMethodId?: number;
    warehouseId?: number;
    priority?: boolean;
    createdOn?: string;
    releaseDate?: string;
    createdBy?: number;
    labelUri?: string;
    channelId?: number;
    transfer?: boolean;
}
interface GoodsOutWarehouses {
    releaseDate: string;
    warehouseId: number;
    transfer?: boolean;
    products: OrderProductInfo[];
}
interface GoodsOutNote {
    warehouses: GoodsOutWarehouses[];
    priority: boolean;
    shippingMethodId?: number;
    labelUri?: string;
}
interface Invoice {
    taxDate: string;
}
interface OrderStatusField {
    orderStatusId: number;
}
interface Parties {
    customer?: Address;
    supplier?: Address;
    delivery?: Address;
    billing?: Address;
}
interface Order {
    orderTypeCode: string;
    parentOrderId?: string;
    reference?: string;
    priceListId?: number;
    priceModeCode?: string;
    invoices?: Invoice[];
    placedOn?: string;
    orderStatus?: OrderStatusField;
    delivery?: {
        deliveryDate?: string;
        shippingMethodId?: number;
    };
    currency?: Currency;
    parties?: Parties;
    assignment?: Assignment;
    warehouseId?: number;
}
interface OrderStatusUpdate {
    orderStatusId: number;
    orderNote?: {
        text?: string;
        isPublic?: boolean;
        fileId?: number;
    };
}
interface OrderStatusInfo {
    statusId: number;
    name: string;
    orderTypeCode: OrderTypeCode;
    sortOrder: number;
    disabled: boolean;
    visible: boolean;
    color: string;
    remindAfterDays: number;
    alertEmails: string[];
    emailContent: string;
    batchProcess: boolean;
    state: string;
}
declare type CustomFieldOptions = AttributeMap<CustomFieldDropDownList>;
interface CustomFieldMetadataInformation {
    id: number;
    code: string;
    name: string;
    customFieldType: string;
    required: boolean;
    options?: CustomFieldOptions;
}
interface StockCorrections {
    corrections: StockCorrection[];
}
interface StockCorrection {
    quantity: number;
    productId: number;
    reason: string;
    locationId: number;
    cost?: StockCorrectionCost;
    batchId?: number;
    orderId?: number;
}
interface StockCorrectionCost {
    currency: string;
    value: number;
}
interface CustomFieldUpdateOptionSelection {
    id: number;
}
interface CustomFieldUpdate<T> {
    op: string;
    path: string;
    value: T;
}
declare type ContactUpdate<T> = CustomFieldUpdate<T>;
interface Quantity {
    magnitude: string;
}
interface RowNet {
    value: string;
}
interface RowTax {
    value: string;
}
interface RowValue {
    taxCode: string;
    rowNet: RowNet;
    rowTax: RowTax;
}
interface OrderRow {
    productName?: string;
    productId?: number;
    quantity: Quantity;
    rowValue?: RowValue;
    nominalCode?: string;
}
interface PriceListNameStructure {
    languageCode: string;
    text: string;
    format: string;
}
interface PriceList {
    id: number;
    name: PriceListNameStructure;
    code: string;
    currencyCode: string;
    currencySymbol: string;
    currencyId: number;
    priceListTypeCode: string;
    gross: boolean;
}
interface LeadSource {
    id: number;
    ownerId: number;
    parentId: number;
    name: string;
    isActive: boolean;
}
interface ProductChannelIntegrationDetail {
    installedIntegrationId: number;
    configSetId: number;
    providerCode: string;
    integrationTypeCode: string;
    active: boolean;
}
interface ProductChannel {
    id: number;
    name: string;
    channelTypeId: number;
    defaultWarehouseId?: number;
    contactGroupId?: number;
    defaultPriceListId?: number;
    channelBrandId: number;
    warehouseIds?: number[];
    integrationDetail?: ProductChannelIntegrationDetail;
}
declare enum GoodsOutNoteEventCodes {
    PLA = "PLA",
    PRI = "PRI",
    UPR = "UPR",
    PIC = "PIC",
    UPI = "UPI",
    PAC = "PAC",
    UPA = "UPA",
    SHW = "SHW"
}
interface GoodsOutNoteEvent {
    eventCode: GoodsOutNoteEventCodes;
    occured: string;
    eventOwnerId: number;
}
interface GoodsOutNoteEvents {
    events: GoodsOutNoteEvent[];
}
interface Stock {
    inStock: number;
    onHand: number;
    allocated: number;
}
interface WarehouseStock extends Stock {
    byLocation?: AttributeMap<Stock>;
}
interface ProductAvailability {
    total: Stock;
    warehouses: AttributeMap<WarehouseStock>;
    allocatedToOrders?: AttributeMap<OrderAllocationInfo>;
    allocatedToTransfers?: AttributeMap<OrderAllocationInfo>;
}
interface OrderAllocationInfo {
    id: number;
    typeCode: string;
}
interface GoodsOutNoteInformation {
    orderId: number;
    warehouseId: number;
    transfer: boolean;
    priority: boolean;
    status: GoodsOutNoteStatuses;
    shipping?: GoodsOutNoteShippingInformation;
    releaseDate: string;
    createdOn: string;
    createdBy: number;
    orderRows: AttributeMap<GoodsOutNoteOrderRowInformation[]>;
    sequence: number;
    events: GoodsOutNoteEvent[];
    labelUri?: string;
}
interface GoodsOutNoteShippingInformation {
    reference?: string;
    boxes?: number;
    shippingMethodId?: number;
    weight?: string;
}
interface GoodsOutNoteOrderRowInformation {
    productId: number;
    quantity: number;
    locationId: number;
    userBatchReference?: string;
}
interface GoodsOutNoteStatuses {
    shipped: boolean;
    packed: boolean;
    picked: boolean;
    printed: boolean;
    pickedOn?: string;
    packedOn?: string;
    shippedOn?: string;
    printedOn?: string;
    pickedById?: number;
    packedById?: number;
    shippedById?: number;
    printedById?: number;
}
declare enum OrderType {
    PURCHASE_ORDER = "purchase",
    SALE_ORDER = "sale"
}
declare enum OrderTypeCode {
    SALES_ORDER = "SO",
    PURCHASE_ORDER = "PO",
    SALES_CREDIT = "SC",
    PURCHASE_CREDIT = "PC"
}
declare enum CustomFieldOperation {
    ADD = "add",
    REPLACE = "replace",
    REMOVE = "remove",
    MOVE = "move",
    TEST = "test"
}
interface GoodsOutNoteUpdate {
    shipping?: GoodsOutNoteShippingInformation;
    labelUri?: string;
}
declare enum AllOrders {
    ORDERID = "*"
}
interface OrderTypeInfo {
    id: number;
    code: string;
    description: string;
}
declare enum OrderUrlParams {
    CUSTOM_FIELDS = "customFields",
    NULL_CUSTOM_FIELDS = "nullCustomFields"
}
declare enum ContactUrlParams {
    CUSTOM_FIELDS = "customFields",
    NULL_CUSTOM_FIELDS = "nullCustomFields",
    POSTAL_ADDRESSES = "postalAddresses"
}
declare enum ProductAvailabilityUrlParams {
    BREAK_DOWN_BY_LOCATION = "breakDownByLocation",
    ALLOCATED_ORDERS = "allocatedOrders",
    ALLOCATED_TRANSFERS = "allocatedTransfers"
}
interface ShippingMethod {
    id: number;
    name: string;
    code?: string;
    breaks: string;
    methodType: number;
    additionalInformationRequired: boolean;
}
interface BrandInfo {
    id?: number;
    name: string;
    description: string;
}
interface BrandSearchParams {
    brandId?: number;
    brandName?: string;
}
interface PostalAddressId {
    addressId: number;
}
interface CollectionSla {
    value: number;
    timeUnits: string;
}
interface ExternalTransferSlas {
    warehouseId: number;
    value: number;
    timeUnits: string;
}
interface Periods {
    dayOfWeek: number;
    openingHours: string;
    closingHours: string;
}
interface WeeklyOperatingPeriods {
    timeZone: string;
    periods: Periods[];
}
declare enum WarehouseType {
    CONCESSION = "concession",
    CONSIGNMENT = "consignment",
    MISCELLANEOUS = "miscellaneous",
    ONLINE = "online",
    STORE = "store",
    SUPPLIER = "supplier",
    THIRD_PARTY_LOGISTICS = "3pl",
    VIRTUAL = "virtual",
    WAREHOUSE = "warehouse"
}
interface Warehouse {
    id?: number;
    name: string;
    address: PostalAddressId;
    type?: WarehouseType;
    logisticsName?: string;
    clickAndCollectEnabled?: boolean;
    weeklyOperatingPeriods?: WeeklyOperatingPeriods;
    collectionSla?: CollectionSla;
    externalTransferSlas?: ExternalTransferSlas[];
    defaultLocation?: AttributeMap<string>;
}
interface WarehouseList {
    warehouses: Warehouse[];
}
interface BrightpearlCategorySearchParams {
    id?: number;
    name?: string;
    parentId?: number;
    active?: boolean;
    createdOn?: string;
    updatedOn?: string;
    createdById?: number;
    updatedBy?: number;
}
interface BrightpearlCategoryInfo {
    id: number;
    name: string;
    parentId: number;
    active: boolean;
    createdOn: string;
    createdById: number;
    updatedOn: string;
    updatedById: number;
    description: Description;
}
interface BrightpearlCategory {
    name: string;
    parentId?: number;
}
interface ProductTypeAssociationsOptions {
    id: number;
    name: string;
}
interface ProductTypeAssociations {
    options: ProductTypeAssociationsOptions[];
}
interface ProductType {
    id?: number;
    name?: string;
    associations?: ProductTypeAssociations;
}
interface ProductPriceUpdate {
    priceListId: number;
    quantityPrice: AttributeMap<string>;
    sku: string;
}
interface ProductPrice {
    productId?: number;
    priceLists?: PriceList[];
    sku?: string;
}
interface ProductPriceList {
    priceLists: ProductPriceUpdate[];
}
interface BrightpearlErrorMessage {
    code: string;
    message: string;
}
interface ResourceErrorsAndStatuses {
    resourceErrors: AttributeMap<BrightpearlErrorMessage[]>;
    resourceStatuses: AttributeMap<number>;
}
interface OrderStatusUpdateRef {
    statusId?: number;
    statusInfo?: {
        name: string;
        orderTypeCode: OrderTypeCode;
    };
}
interface SalesInvoiceHeader {
    contactId: number;
    taxDate: string;
    dueDate?: string;
    description?: string;
    currencyId: number;
    exchangeRate?: number;
    orderId: number;
}
interface SalesInvoiceLineItem {
    net: number;
    tax: number;
    nominalCode: string;
    taxClassId: number;
    projectId?: number;
    leadSourceId?: number;
    channelId?: number;
}
interface SalesInvoice {
    header: SalesInvoiceHeader;
    lines: SalesInvoiceLineItem[];
}
interface CurrencySearchParams {
    id?: number;
    title?: string;
    code?: string;
    symbol?: string;
    exchangeRate?: string;
    isDefault?: boolean;
    exchangeRateVarianceNominalCode?: string;
}
interface SalesOrderClose {
    taxDate?: string;
}
interface PaginationParams {
    pageSize?: number;
    firstResult?: number;
}
interface PaymentMethodSearchParams {
    id?: number;
    code?: string;
    name?: string;
    active?: boolean;
    currency?: string;
    bank_account?: string;
}
interface PaymentMethod {
    id: number;
    name: string;
    code: string;
    isActive: boolean;
    bankAccounts: BankAccounts[];
    installedIntegrationId?: string;
}
interface BankAccounts {
    paymentMethodId?: number;
    currencyIsoCode?: string;
    bankAccountNominalCode?: string;
}
declare type SalesCreditInformation = SalesOrderInformation;
export { Address, AllOrders, Assignment, AttributeMap, BrandInfo, BrandSearchParams, BrightpearlCategory, BrightpearlCategoryInfo, BrightpearlCategorySearchParams, BrightpearlClientParams, BundleComponents, Category, Column, Communication, Composition, ContactDetails, ContactInfo, ContactPostalAddress, ContactSearchParams, ContactStatus, ContactUpdate, ContactUrlParams, Cost, Currency, CurrencySearchParams, Current, CustomFieldDropDownList, CustomFieldMetadataInformation, CustomFieldOperation, CustomFieldOptions, CustomFieldUpdate, CustomFieldUpdateOptionSelection, CustomFields, CustomerPayment, CustomerPaymentSearchParams, Description, Email, Emails, FinancialDetails, GoodsOutNote, GoodsOutNoteEvent, GoodsOutNoteEventCodes, GoodsOutNoteEvents, GoodsOutNoteInformation, GoodsOutNoteOrderRowInformation, GoodsOutNoteSearchParams, GoodsOutNoteShippingInformation, GoodsOutNoteStatuses, GoodsOutNoteUpdate, GoodsOutWarehouses, Invoice, LeadSource, MarketingDetails, MetaData, Order, OrderAllocationInfo, OrderInfoInvoice, OrderInformation, OrderInformationComposition, OrderInformationRow, OrderInformationRowValue, OrderNote, OrderNoteSearchParams, OrderProductInfo, OrderRow, OrderStatusField, OrderStatusInfo, OrderStatusUpdateRef, OrderStatusUpdate, OrderTotal, OrderType, OrderTypeCode, OrderTypeInfo, OrderUrlParams, OrdersSearchParams, Organisation, Pagination, Parties, PaymentType, PaymentMethod, PaymentMethodSearchParams, PostAddressIds, PostalAddress, PostalAddressTypes, PriceList, PriceListNameStructure, Product, ProductAvailability, ProductAvailabilityUrlParams, ProductChannel, ProductChannelIntegrationDetail, ProductFinancialDetails, ProductIdentity, ProductInfo, ProductPrice, ProductPriceList, ProductPriceUpdate, ProductSearchParams, ProductStockInfo, ProductType, Quantity, RelationshipToAccount, ResourceErrorsAndStatuses, Response, RowNet, RowTax, RowValue, SalesChannel, SalesCreditInformation, SalesInvoice, SalesInvoiceLineItem, SalesInvoiceHeader, SalesOrder, SalesOrderClose, SalesOrderDelivery, SalesOrderInformation, SalesOrderRow, SalesOrderRowResponse, SalesOrderTotal, SearchResult, ShippingMethod, Stock, StockCorrection, StockCorrections, StockReservation, Telephones, Warehouse, WarehouseAddress, WarehouseInformation, WarehouseList, WarehouseStock, WarehouseStockReservation, WarehouseType, PaginationParams, PrivateAppHeaders, PublicAppHeaders, PublicAppCredentials, RefreshTokenResponse };
