{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Grid, Container, AppBar } from '@material-ui/core';\nimport Scroll from './Components/Scroll/Scroll';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      acceptedImage: \"\"\n    };\n\n    this.getText = async () => {\n      const response = await fetch('/read_text');\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.postText = async () => {\n      const response = await fetch('http://localhost:5000/submit_image', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: `public/img/${this.state.acceptedImage}`\n        })\n      });\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        const binaryStr = reader.result;\n        this.setState({\n          acceptedImage: binaryStr\n        }, () => {\n          this.logImage();\n        });\n        console.log(binaryStr);\n      };\n\n      reader.readAsArrayBuffer(file[0]);\n    };\n\n    this.writeFile = async () => {\n      const response = await fetch('http://localhost:5000/write_image', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: `public/img/${this.state.acceptedImage}`\n        })\n      });\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.uploadImage = async image => {\n      var formData = new FormData();\n      formData.append('photo', image[0]);\n      const response = await fetch('/upload', {\n        method: \"post\",\n        body: formData\n      });\n      const body = await response.json();\n      console.log(body.split(/\\r?\\n/));\n      this.setState({\n        data: body.split(/\\r?\\n/)\n      });\n    };\n  }\n\n  printText() {\n    // this.getText()\n    this.postText().then(res => this.setState({\n      data: res\n    })).catch(err => console.log(err));\n  }\n\n  clearText() {\n    this.setState({\n      data: []\n    });\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"App\",\n      direction: \"column\",\n      alignItems: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        id: \"appBar\",\n        position: \"static\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"dropzoneContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n          id: \"dropzone\",\n          onDrop: acceptedFiles => this.uploadImage(acceptedFiles),\n          children: ({\n            getRootProps,\n            getInputProps\n          }) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Drag 'n' drop some files here, or click to select files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.data.map((segment, i) => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                value: \"segments\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `segment${i}`,\n                  children: [\"Segment \", i + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  name: `segment${i}`,\n                  type: \"text\",\n                  defaultValue: segment\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 23\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"buttonContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"googleVision\",\n          type: \"button\",\n          onClick: () => {\n            this.printText();\n          },\n          children: \"Google Vision (img URL)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"tesseractJS\",\n          type: \"button\",\n          onClick: () => {\n            this.writeFile();\n          },\n          children: \"Send Image to Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => this.clearText(),\n          children: \"Clear text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/App.js"],"names":["React","Dropzone","Grid","Container","AppBar","Scroll","App","Component","state","data","acceptedImage","getText","response","fetch","body","json","console","log","status","Error","message","postText","method","headers","JSON","stringify","image","readFile","file","reader","FileReader","onabort","onerror","onload","binaryStr","result","setState","logImage","readAsArrayBuffer","writeFile","uploadImage","formData","FormData","append","split","printText","then","res","catch","err","clearText","render","acceptedFiles","getRootProps","getInputProps","map","segment","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Grid, Container, AppBar } from '@material-ui/core';\nimport Scroll from './Components/Scroll/Scroll'\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    acceptedImage: \"\"\n  };\n\n  getText = async () => {\n    const response  = await fetch('/read_text');\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  postText = async () => {\n    const response = await fetch('http://localhost:5000/submit_image', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        image: `public/img/${this.state.acceptedImage}`\n      })\n    })\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  printText() {\n    // this.getText()\n    this.postText()\n    .then(res => this.setState({data: res}))\n    .catch(err => console.log(err));\n  };\n\n  readFile = (file) => {\n    const reader = new FileReader()\n\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      const binaryStr = reader.result\n      this.setState({acceptedImage: binaryStr},\n        () => {this.logImage()}\n      )\n      console.log(binaryStr)\n    }\n    reader.readAsArrayBuffer(file[0])\n  }\n\n  writeFile = async () => {\n    const response = await fetch('http://localhost:5000/write_image', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        image: `public/img/${this.state.acceptedImage}`\n      })\n    })\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  uploadImage = async (image) => {\n    var formData = new FormData();\n    formData.append('photo', image[0])\n    const response = await fetch('/upload', {\n      method: \"post\",\n      body: formData\n    })\n    const body = await response.json();\n    console.log(body.split(/\\r?\\n/))\n    this.setState({data: body.split(/\\r?\\n/)})\n  }\n\n  clearText() {\n    this.setState({data: []})\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage)\n  }\n\n  render() {\n    return (\n      <Grid container className=\"App\" direction=\"column\" alignItems=\"stretch\">\n        <AppBar id=\"appBar\" position=\"static\">\n        </AppBar>\n        <Container id=\"dropzoneContainer\">\n          <Dropzone id=\"dropzone\" onDrop={acceptedFiles => this.uploadImage(acceptedFiles)}>\n            {({getRootProps, getInputProps}) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <p>Drag 'n' drop some files here, or click to select files</p>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n          <Scroll>\n            <p>{this.state.data}</p>\n            <div>\n              {\n                this.state.data.map((segment, i) => {\n                  return (\n                    <form key={i} value=\"segments\">\n                      <label htmlFor={`segment${i}`}>Segment {i+1}</label>\n                      <input name={`segment${i}`} type=\"text\" defaultValue={segment}></input>\n                    </form>\n                  )\n                })\n              }\n            </div>\n          </Scroll>\n        </Container>\n        <Container id=\"buttonContainer\">\n          <button id=\"googleVision\" type=\"button\" onClick={() => {this.printText()}}>Google Vision (img URL)</button>\n          <button id=\"tesseractJS\" type=\"button\" onClick={() => {this.writeFile()}}>Send Image to Server</button>\n        </Container>\n        <Container>\n          <button type=\"button\" onClick={() => this.clearText()}>Clear text</button>\n        </Container>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}