{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Containers/TextDetection/TextDetection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Grid, Container, Card, Button } from '@material-ui/core';\nimport Dropzone from '../../Components/Dropzone/Dropzone';\nimport Scroll from '../../Components/Scroll/Scroll';\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\n\nfunction TextDetection() {\n  _s();\n\n  const [data, setData] = useState([]);\n\n  const uploadImage = async image => {\n    var formData = new FormData();\n    formData.append('photo', image[0]);\n    const response = await fetch('/upload', {\n      method: \"post\",\n      body: formData\n    });\n    const body = await response.json();\n    console.log(body.split(/\\r?\\n/));\n    setData(body.split(/\\r?\\n/));\n  };\n\n  function clearText() {\n    setData([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: \"App\",\n    direction: \"column\",\n    alignItems: \"stretch\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      id: \"dropzoneContainer\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(Dropzone, {\n          uploadImage: uploadImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Scroll, {\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                  children: \"Segment\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                  children: \"Transcribed Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.map((segment, i) => {\n                return /*#__PURE__*/_jsxDEV(\"form\", {\n                  value: \"segments\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: `segment${i}`,\n                    children: [\"Segment \", i + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    name: `segment${i}`,\n                    type: \"text\",\n                    defaultValue: segment\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 23\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        type: \"button\",\n        onClick: () => clearText(),\n        children: \"Clear text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextDetection, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n\n_c = TextDetection;\nexport default TextDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextDetection\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Containers/TextDetection/TextDetection.js"],"names":["React","useState","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Grid","Container","Card","Button","Dropzone","Scroll","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","TextDetection","data","setData","uploadImage","image","formData","FormData","append","response","fetch","method","json","console","log","split","clearText","map","segment","i"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Grid, Container, Card, Button } from '@material-ui/core';\nimport Dropzone from '../../Components/Dropzone/Dropzone'\nimport Scroll from '../../Components/Scroll/Scroll'\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction TextDetection() {\n  const [data, setData] = useState([])\n\n  const uploadImage = async (image) => {\n    var formData = new FormData();\n    formData.append('photo', image[0])\n    const response = await fetch('/upload', {\n      method: \"post\",\n      body: formData\n    })\n    const body = await response.json();\n    console.log(body.split(/\\r?\\n/))\n    setData(body.split(/\\r?\\n/))\n  }\n\n  function clearText() {\n    setData([])\n  }\n\n  return (\n    <Grid container className=\"App\" direction=\"column\" alignItems=\"stretch\">\n      <Container id=\"dropzoneContainer\">\n        <Card variant=\"outlined\">\n          <Dropzone uploadImage = {uploadImage}/>\n        </Card>\n      </Container>\n      <Container>\n        <Scroll>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Segment</StyledTableCell>\n                  <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n              {\n                data.map((segment, i) => {\n                  return (\n                    <form key={i} value=\"segments\">\n                      <label htmlFor={`segment${i}`}>Segment {i+1}</label>\n                      <input name={`segment${i}`} type=\"text\" defaultValue={segment}></input>\n                    </form>\n                  )\n                })\n              }\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scroll>\n      </Container>\n      <Container>\n        <Button variant=\"outlined\" type=\"button\" onClick={() => clearText()}>Clear text</Button>\n      </Container>\n    </Grid>\n  );\n}\n\nexport default TextDetection;\n"]},"metadata":{},"sourceType":"module"}