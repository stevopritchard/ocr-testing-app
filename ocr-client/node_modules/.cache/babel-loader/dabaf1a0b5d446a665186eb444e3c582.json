{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport { Select, MenuItem } from '@material-ui/core';\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {//   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nexport default function TextTable({\n  segments\n}) {\n  _s();\n\n  const defaultCategories = [{\n    value: 'Invoice Number'\n  }, {\n    value: 'Quantity'\n  }, {\n    value: 'Price'\n  }];\n  const [categories, updateCategories] = useState(defaultCategories);\n  const catRefs = useRef([]);\n  const [currentCategory, setSelected] = useState(''); //create an array of refs for each row\n\n  const segmentsLength = segments.length;\n\n  if (catRefs.current.length !== segmentsLength) {\n    catRefs.current = Array(segmentsLength).fill().map((_, i) => catRefs.current[i]);\n    console.log(catRefs.current);\n  } //callback assigns the selected category to the TextField with the ref that has a matching index\n\n\n  const handleChange = (index, event) => {\n    // setSelected(event.target.value);\n    catRefs.current[index] = event.target.value;\n    updateCategories(categories.filter(category => category.value !== event.target.value)); //this line is commented out because it removes the text from the selected MenuItem\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Transcribed Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: segments ? segments.map((segment, i) => {\n          if (segment !== \"\") {\n            return /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: catRefs.current[i],\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  onChange: handleChange.bind(this, i),\n                  children: categories.map((category, j) => {\n                    return /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: category.value,\n                      children: category.value\n                    }, j, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 53\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: segment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this);\n          } else {\n            return null;\n          }\n        }) : /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"m7UgpHQcIejlADtLMHKoRh2Mg8M=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","useState","useEffect","useRef","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Checkbox","Paper","TextField","Select","MenuItem","useStyles","container","marginLeft","marginRight","maxHeight","height","StyledTableCell","theme","head","body","fontSize","StyledTableRow","root","backgroundColor","palette","action","hover","TextTable","segments","defaultCategories","value","categories","updateCategories","catRefs","currentCategory","setSelected","segmentsLength","length","current","Array","fill","map","_","i","console","log","handleChange","index","event","target","filter","category","classes","segment","bind","j"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\n\nimport {Select, MenuItem } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n\nexport default function TextTable({segments}) {\n    const defaultCategories = [{value:'Invoice Number'}, {value:'Quantity'}, {value:'Price'}]\n\n    const [categories, updateCategories] = useState(defaultCategories)\n\n    const catRefs = useRef([])\n\n    const [currentCategory, setSelected] = useState('')\n\n    //create an array of refs for each row\n    const segmentsLength = segments.length;\n\n    if(catRefs.current.length !== segmentsLength) {\n        catRefs.current = Array(segmentsLength).fill().map((_, i) => catRefs.current[i])\n        console.log(catRefs.current)\n    }\n\n    //callback assigns the selected category to the TextField with the ref that has a matching index\n    const handleChange = (index, event) => {\n        // setSelected(event.target.value);\n        catRefs.current[index] = event.target.value\n        updateCategories(categories.filter(category => category.value !== event.target.value)) //this line is commented out because it removes the text from the selected MenuItem\n    }\n\n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                <TableRow>\n                    <StyledTableCell>Category</StyledTableCell>\n                    <StyledTableCell>Available</StyledTableCell>\n                    <StyledTableCell>Line</StyledTableCell>\n                    <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        segments ?\n                        segments.map((segment, i) => {\n                            if (segment !== \"\") {\n                                return (\n                                <StyledTableRow key={i}>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={catRefs.current[i]} \n                                            disabled\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <Select\n                                            onChange={handleChange.bind(this, i)}\n                                        >\n                                            {categories.map((category, j) => {\n                                                return (\n                                                    <MenuItem \n                                                    key={j}\n                                                    value={category.value}\n                                                    >\n                                                        {category.value}\n                                                    </MenuItem>\n                                                )\n                                            })}\n                                        </Select>\n                                    </StyledTableCell>\n                                    <StyledTableCell>{i+1}</StyledTableCell>\n                                    <StyledTableCell>{segment}</StyledTableCell>\n                                </StyledTableRow>\n                                )\n                            } else {\n                                return null\n                            }\n                        }) \n                        :\n                        <StyledTableRow>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                        </StyledTableRow>\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}