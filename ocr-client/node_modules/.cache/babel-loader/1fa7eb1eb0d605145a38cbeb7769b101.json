{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper'; // import MaterialTable, { Column } from 'material-table';\n\nimport { Select, MenuItem } from '@material-ui/core';\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {//   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow); // const columns = [\n//     {\n//         title: 'Line',\n//         field: 'line',\n//         type: 'numeric'\n//     },\n//     {\n//         title: 'Category',\n//         field: 'category',\n//     },\n//     { \n//         title: 'Text', \n//         field: 'text', \n//         type: 'string' \n//     }\n// ]\n\nexport default function TextTable({\n  segments\n}) {\n  _s();\n\n  // let data = segments.map((segment, i) => {\n  //     if (segment !== \"\") {\n  //         return {line: i+1, text: segment}\n  //     } else {\n  //         return {}\n  //     }\n  // })\n  const categories = ['Invoice Number', 'Quantity', 'Price'];\n  const [currentCategory, setCategory] = React.useState('');\n\n  const handleChange = event => {\n    setCategory(event.target.value);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Transcribed Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: segments ? segments.map((segment, i) => {\n          if (segment !== \"\") {\n            return /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                onChange: handleChange,\n                children: categories.map(category => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: category,\n                    children: category\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: segment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this);\n          } else {\n            return null;\n          }\n        }) : /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"TCR6IQiOX+A3AnQZxEABaIA66eE=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Checkbox","Paper","Select","MenuItem","useStyles","container","marginLeft","marginRight","maxHeight","height","StyledTableCell","theme","head","body","fontSize","StyledTableRow","root","backgroundColor","palette","action","hover","TextTable","segments","categories","currentCategory","setCategory","useState","handleChange","event","target","value","classes","map","segment","i","category"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\n\n// import MaterialTable, { Column } from 'material-table';\nimport {Select, MenuItem } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n// const columns = [\n//     {\n//         title: 'Line',\n//         field: 'line',\n//         type: 'numeric'\n//     },\n//     {\n//         title: 'Category',\n//         field: 'category',\n//     },\n//     { \n//         title: 'Text', \n//         field: 'text', \n//         type: 'string' \n//     }\n// ]\n\nexport default function TextTable({segments}) {\n    // let data = segments.map((segment, i) => {\n    //     if (segment !== \"\") {\n    //         return {line: i+1, text: segment}\n    //     } else {\n    //         return {}\n    //     }\n    // })\n    const categories = ['Invoice Number', 'Quantity', 'Price']\n    const [currentCategory, setCategory] = React.useState('')\n    const handleChange = (event) => {\n        setCategory(event.target.value)\n    }\n\n    const classes = useStyles()\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                <TableRow>\n                    <StyledTableCell></StyledTableCell>\n                    <StyledTableCell>Line</StyledTableCell>\n                    <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        segments ?\n                        segments.map((segment, i) => {\n                            if (segment !== \"\") {\n                                return (\n                                <StyledTableRow key={i}>\n                                    {/* <Checkbox></Checkbox> */}\n                                    <Select\n                                        onChange={handleChange}\n                                    >\n                                        {categories.map((category) => {\n                                            return (\n                                                <MenuItem value={category}>\n                                                    {category}\n                                                </MenuItem>\n                                            )\n                                        })}\n                                    </Select>\n                                    <StyledTableCell>{i+1}</StyledTableCell>\n                                    <StyledTableCell>{segment}</StyledTableCell>\n                                </StyledTableRow>\n                                )\n                            } else {\n                                return null\n                            }\n                        }) \n                        :\n                        <StyledTableRow>\n                            <Checkbox></Checkbox>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                        </StyledTableRow>\n                    }\n                </TableBody>\n            </Table>\n            {/* <MaterialTable\n                title=\"Material Table (Cascading)\"\n                columns={columns}\n                data={data}\n            /> */}\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}