{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport { Select, MenuItem } from '@material-ui/core';\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {//   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nexport default function TextTable({\n  segments,\n  setJson\n}) {\n  _s();\n\n  const defaultCategories = ['description', 'quantity', 'price']; // const defaultCategories = segments.map((segment) => (segment[0]))\n  //the array of categories available to the dropdown in the table\n\n  const [categories, updateCategories] = useState(defaultCategories); //the ref to which selected catories are assigned\n\n  const catRefs = useRef([]);\n  const [isChecked, setisChecked] = useState(segments.slice.fill(false));\n\n  const toggleCheckboxValue = index => {\n    setisChecked(isChecked.map((v, i) => i === index ? !v : v));\n  };\n\n  const [currentCategory, setSelected] = useState('');\n  const [finalCategories, setFinal] = useState([]);\n  const [finalSegments, setSegments] = useState([]); //create an array of refs for each row\n\n  const segmentsLength = segments.length;\n\n  if (catRefs.current.length !== segmentsLength) {\n    //initialises a new array of the length of the segments array, fills with undefined, assigns an iterant of catRefs.current in sequence, then assigns this new array to the existing .current property\n    catRefs.current = Array(segmentsLength).fill().map((_, i) => catRefs.current[i] = segments[i][0]);\n    console.log(catRefs.current);\n  } //callback assigns the selected category to the TextField with the ref that has a matching index\n\n\n  const setSelection = (index, event) => {\n    console.log(event.target.value, index);\n    setSelected(event.target.value);\n    catRefs.current[index] = event.target.value;\n    console.log(catRefs);\n    updateCategories(categories.filter(category => category !== event.target.value)); //to be amended to filter out items that exist in catRefs\n  };\n\n  const setCategories = () => {\n    // setFinal(catRefs.current)\n    let filteredCategories = finalCategories.filter((cat, i) => cat !== undefined);\n    console.log(filteredCategories);\n    let catKeys = [];\n    filteredCategories.forEach(element => {\n      catKeys.push(finalCategories.indexOf(element));\n    });\n    console.log(catKeys); // catKeys.forEach(key => {\n    //     setSegments(prevState => [...prevState, segments[key]])\n    // });\n\n    catKeys.forEach(key => {\n      finalSegments.push(segments[key]); //push to intermediary object instead of state object itself\n    });\n    console.log(finalSegments);\n    let jsonDoc = {};\n    filteredCategories.forEach((category, i) => {\n      var key = category;\n      jsonDoc[key] = finalSegments[i];\n    });\n    console.log(jsonDoc);\n    setJson(jsonDoc);\n  }; // useEffect(() => {\n  //     updateCategories(defaultCategories)\n  // },[categories])\n\n\n  useEffect(() => {\n    setFinal(catRefs.current);\n  }, [catRefs.current]);\n  useEffect(() => {\n    setSegments(finalSegments);\n  }, [finalSegments]);\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Transcribed Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: segments ? segments.map((segment, i) => {\n          if (segment !== \"\") {\n            return /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(TextField // ref={catRefs.current[i]}\n                , {\n                  value: catRefs.current[i] // value={segment[0]}\n                  ,\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  onChange: setSelection.bind(this, i),\n                  children: categories.map((category, j) => {\n                    return /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: category,\n                      children: category\n                    }, j, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 160,\n                      columnNumber: 53\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  inputProps: {\n                    'aria-label': 'primary checkbox'\n                  }\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: segment[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this);\n          } else {\n            return null;\n          }\n        }) : /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      type: \"button\",\n      onClick: setCategories,\n      children: \"set categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"I8WRZ9xFD8UIIZ03ovK7o4y2wEs=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","useState","useEffect","useRef","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","TextField","Checkbox","Button","Select","MenuItem","useStyles","container","marginLeft","marginRight","maxHeight","height","StyledTableCell","theme","head","body","fontSize","StyledTableRow","root","backgroundColor","palette","action","hover","TextTable","segments","setJson","defaultCategories","categories","updateCategories","catRefs","isChecked","setisChecked","slice","fill","toggleCheckboxValue","index","map","v","i","currentCategory","setSelected","finalCategories","setFinal","finalSegments","setSegments","segmentsLength","length","current","Array","_","console","log","setSelection","event","target","value","filter","category","setCategories","filteredCategories","cat","undefined","catKeys","forEach","element","push","indexOf","key","jsonDoc","classes","segment","bind","j"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport Button from '@material-ui/core/Button'\n\nimport {Select, MenuItem } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n\nexport default function TextTable({segments, setJson}) {\n    const defaultCategories = ['description', 'quantity', 'price']\n    // const defaultCategories = segments.map((segment) => (segment[0]))\n    //the array of categories available to the dropdown in the table\n    const [categories, updateCategories] = useState(defaultCategories)\n    \n    //the ref to which selected catories are assigned\n    const catRefs = useRef([])\n\n    const [isChecked, setisChecked] = useState(segments.slice.fill(false))\n\n    const toggleCheckboxValue = index => {\n        setisChecked(isChecked.map((v, i) => (i === index ? !v : v)))\n    }\n\n    const [currentCategory, setSelected] = useState('')\n\n    const [finalCategories, setFinal] = useState([]);\n    const [finalSegments, setSegments] = useState([]);\n\n    //create an array of refs for each row\n    const segmentsLength = segments.length;\n\n    if(catRefs.current.length !== segmentsLength) {\n        //initialises a new array of the length of the segments array, fills with undefined, assigns an iterant of catRefs.current in sequence, then assigns this new array to the existing .current property\n        catRefs.current = Array(segmentsLength).fill().map((_, i) => \n            catRefs.current[i] = segments[i][0]\n        )\n        console.log(catRefs.current)\n    }\n\n\n    //callback assigns the selected category to the TextField with the ref that has a matching index\n    const setSelection = (index, event) => {\n        console.log(event.target.value, index)\n        setSelected(event.target.value);\n        catRefs.current[index] = event.target.value\n        console.log(catRefs)\n        updateCategories(categories.filter(category => category !== event.target.value)) //to be amended to filter out items that exist in catRefs\n    }\n    \n    const setCategories = () => {\n        // setFinal(catRefs.current)\n        \n        let filteredCategories = finalCategories.filter((cat, i) => cat !== undefined)\n        console.log(filteredCategories)\n        let catKeys = []\n        filteredCategories.forEach(element => {\n            catKeys.push(finalCategories.indexOf(element))\n        });\n        console.log(catKeys)\n        // catKeys.forEach(key => {\n        //     setSegments(prevState => [...prevState, segments[key]])\n        // });\n        catKeys.forEach(key => {\n            finalSegments.push(segments[key]) //push to intermediary object instead of state object itself\n        })\n        console.log(finalSegments)\n\n        let jsonDoc = {}\n        filteredCategories.forEach((category, i) => {\n            var key = category\n            jsonDoc[key] = finalSegments[i]\n        });\n        console.log(jsonDoc)\n        setJson(jsonDoc)\n    }\n    // useEffect(() => {\n    //     updateCategories(defaultCategories)\n    // },[categories])\n    useEffect(() => {\n        setFinal(catRefs.current)\n    },[catRefs.current])\n\n    useEffect(() => {\n        setSegments(finalSegments)\n    },[finalSegments])\n\n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                <TableRow>\n                    <StyledTableCell>Category</StyledTableCell>\n                    <StyledTableCell>Available</StyledTableCell>\n                    <StyledTableCell>Selected</StyledTableCell>\n                    <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        segments ?\n                        segments.map((segment, i) => {\n                            if (segment !== \"\") {\n                                return (\n                                <StyledTableRow key={i}>\n                                    <StyledTableCell>\n                                        <TextField\n                                            // ref={catRefs.current[i]}\n                                            value={catRefs.current[i]} \n                                            // value={segment[0]}\n                                            disabled\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <Select\n                                            onChange={setSelection.bind(this, i)}\n                                        >\n                                            {categories.map((category, j) => {\n                                                return (\n                                                    <MenuItem \n                                                    key={j}\n                                                    value={category}\n                                                    >\n                                                        {category}\n                                                    </MenuItem>\n                                                )\n                                            })}\n                                        </Select>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <Checkbox\n                                            key={i}\n                                            inputProps={{'aria-label': 'primary checkbox'}}\n                                        />\n                                    </StyledTableCell>\n                                    <StyledTableCell>{segment[1]}</StyledTableCell>\n                                </StyledTableRow>\n                                )\n                            } else {\n                                return null\n                            }\n                        }) \n                        :\n                        <StyledTableRow>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                        </StyledTableRow>\n                    }\n                </TableBody>\n            </Table>\n            <Button variant=\"outlined\" type=\"button\" onClick={setCategories}>set categories</Button>\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}