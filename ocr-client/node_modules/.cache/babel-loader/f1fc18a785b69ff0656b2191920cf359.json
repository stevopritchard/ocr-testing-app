{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-frontend/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Grid, Container, AppBar } from '@material-ui/core';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null,\n      acceptedImage: \"\"\n    };\n\n    this.getText = async () => {\n      const response = await fetch('/read_text');\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.postText = async () => {\n      const response = await fetch('http://localhost:5000/submit_image', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: `public/img/${this.state.acceptedImage[0].path}`\n        })\n      });\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  printText() {\n    // this.getText()\n    this.postText().then(res => this.setState({\n      data: res\n    })).catch(err => console.log(err));\n  }\n\n  readFile(file) {\n    const reader = new FileReader();\n\n    reader.onabort = () => console.log('file reading was aborted');\n\n    reader.onerror = () => console.log('file reading has failed');\n\n    reader.onload = () => {\n      const binaryStr = reader.result;\n      this.setState({\n        acceptedImage: binaryStr\n      }, () => {\n        this.logImage();\n      });\n      console.log(binaryStr);\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"App\",\n      direction: \"row\",\n      alignItems: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        id: \"appBar\",\n        position: \"static\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"dropzoneContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n          id: \"dropzone\",\n          onDrop: acceptedFiles => this.readFile(acceptedFiles),\n          children: ({\n            getRootProps,\n            getInputProps\n          }) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Drag 'n' drop some files here, or click to select files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"buttonContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"googleVision\",\n          type: \"button\",\n          onClick: () => {\n            this.printText();\n          },\n          children: \"Google Vision\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"tesseractJS\",\n          type: \"button\",\n          children: \"Tesseract.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"formContainer\",\n        maxWidth: \"xl\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            padding: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-frontend/src/App.js"],"names":["React","Dropzone","Grid","Container","AppBar","App","Component","state","data","acceptedImage","getText","response","fetch","body","json","console","log","status","Error","message","postText","method","headers","JSON","stringify","image","path","printText","then","res","setState","catch","err","readFile","file","reader","FileReader","onabort","onerror","onload","binaryStr","result","logImage","readAsArrayBuffer","render","acceptedFiles","getRootProps","getInputProps","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Grid, Container, AppBar } from '@material-ui/core';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    data: null,\n    acceptedImage: \"\"\n  };\n\n  getText = async () => {\n    const response  = await fetch('/read_text');\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  postText = async () => {\n    const response = await fetch('http://localhost:5000/submit_image', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        image: `public/img/${this.state.acceptedImage[0].path}`\n      })\n    })\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  printText() {\n    // this.getText()\n    this.postText()\n    .then(res => this.setState({data: res}))\n    .catch(err => console.log(err));\n  };\n\n  readFile(file) {\n    const reader = new FileReader()\n\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      const binaryStr = reader.result\n      this.setState({acceptedImage: binaryStr},\n        () => {this.logImage()}\n      )\n      console.log(binaryStr)\n    }\n    reader.readAsArrayBuffer(file)\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage)\n  }\n\n  render() {\n    return (\n      <Grid container className=\"App\" direction=\"row\" alignItems=\"stretch\">\n        <AppBar id=\"appBar\" position=\"static\">\n        </AppBar>\n        <Container id=\"dropzoneContainer\">\n          <Dropzone id=\"dropzone\" onDrop={acceptedFiles => this.readFile(acceptedFiles)}>\n            {({getRootProps, getInputProps}) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <p>Drag 'n' drop some files here, or click to select files</p>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n          \n        <p>{this.state.data}</p>\n        </Container>\n        <Container id=\"buttonContainer\">\n          <button id=\"googleVision\" type=\"button\" onClick={() => {this.printText()}}>Google Vision</button>\n          <button id=\"tesseractJS\" type=\"button\">Tesseract.js</button>\n        </Container>\n        <Container id=\"formContainer\" maxWidth='xl'>\n          <form style={{padding: \"10px\"}}>\n            <input type=\"text\"></input>\n            <input type=\"submit\"></input>\n          </form>\n        </Container>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}