{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport { Select, MenuItem } from '@material-ui/core';\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {//   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nexport default function TextTable({\n  segments\n}) {\n  _s();\n\n  const defaultCategories = [{\n    value: 'Invoice Number'\n  }, {\n    value: 'Quantity'\n  }, {\n    value: 'Price'\n  }];\n  const [categories, updateCategories] = useState(defaultCategories);\n  const catRefs = useRef([]);\n  const [currentCategory, setSelected] = useState('');\n  const segmentsLength = segments.length;\n\n  if (catRefs.current.length !== segmentsLength) {\n    catRefs.current = Array(segmentsLength).fill().map((_, i) => catRefs.current[i]);\n    console.log(catRefs.current);\n  }\n\n  const handleChange = (index, event) => {\n    setSelected(event.target.value);\n    catRefs.current[index] = event.target.value;\n    console.log(catRefs.current); // updateCategories(categories.filter(category => category.value !== event.target.value)) //this line is commented out because it removes the text from the selected MenuItem\n  }; // const refChange = (i) => {\n  //     console.log(catRefs.current[i])\n  // }\n\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Transcribed Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: segments ? segments.map((segment, i) => {\n          if (segment !== \"\") {\n            return /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TextField // value={ref => {catRefs.current[i] = ref}} \n              , {\n                value: catRefs.current[i] // disabled\n                // onChange={() => refChange(i)}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                onChange: () => handleChange.bind(this, i),\n                children: categories.map((category, j) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: category.value,\n                    children: category.value\n                  }, j, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: segment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this);\n          } else {\n            return null;\n          }\n        }) : /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"m7UgpHQcIejlADtLMHKoRh2Mg8M=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","useState","useEffect","useRef","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Checkbox","Paper","TextField","Select","MenuItem","useStyles","container","marginLeft","marginRight","maxHeight","height","StyledTableCell","theme","head","body","fontSize","StyledTableRow","root","backgroundColor","palette","action","hover","TextTable","segments","defaultCategories","value","categories","updateCategories","catRefs","currentCategory","setSelected","segmentsLength","length","current","Array","fill","map","_","i","console","log","handleChange","index","event","target","classes","segment","bind","category","j"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\n\nimport {Select, MenuItem } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n\nexport default function TextTable({segments}) {\n    const defaultCategories = [{value:'Invoice Number'}, {value:'Quantity'}, {value:'Price'}]\n\n    const [categories, updateCategories] = useState(defaultCategories)\n\n    const catRefs = useRef([])\n\n    const [currentCategory, setSelected] = useState('')\n\n    \n\n    const segmentsLength = segments.length;\n\n    if(catRefs.current.length !== segmentsLength) {\n        catRefs.current = Array(segmentsLength).fill().map((_, i) => catRefs.current[i])\n        console.log(catRefs.current)\n    }\n\n    const handleChange = (index, event) => {\n        setSelected(event.target.value);\n        catRefs.current[index] = event.target.value\n        console.log(catRefs.current)\n        // updateCategories(categories.filter(category => category.value !== event.target.value)) //this line is commented out because it removes the text from the selected MenuItem\n    }\n    // const refChange = (i) => {\n    //     console.log(catRefs.current[i])\n    // }\n\n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                <TableRow>\n                    <StyledTableCell></StyledTableCell>\n                    <StyledTableCell>Category</StyledTableCell>\n                    <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        segments ?\n                        segments.map((segment, i) => {\n                            if (segment !== \"\") {\n                                return (\n                                <StyledTableRow key={i}>\n                                    <TextField\n                                        // value={ref => {catRefs.current[i] = ref}} \n                                        value={catRefs.current[i]} \n                                        // disabled\n                                        // onChange={() => refChange(i)}\n                                    >\n                                    {/* {catRefs.current[i]} */}\n                                    </TextField>\n                                    <Select\n                                        onChange={() => handleChange.bind(this, i)}\n                                    >\n                                        {categories.map((category, j) => {\n                                            return (\n                                                <MenuItem \n                                                key={j}\n                                                value={category.value}\n                                                >\n                                                    {category.value}\n                                                </MenuItem>\n                                            )\n                                        })}\n                                    </Select>\n                                    <StyledTableCell>{i+1}</StyledTableCell>\n                                    <StyledTableCell>{segment}</StyledTableCell>\n                                </StyledTableRow>\n                                )\n                            } else {\n                                return null\n                            }\n                        }) \n                        :\n                        <StyledTableRow>\n                            <Checkbox></Checkbox>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                        </StyledTableRow>\n                    }\n                </TableBody>\n            </Table>\n            {/* <TextField ref={catRefs} value={catRefs.current}></TextField> */}\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}