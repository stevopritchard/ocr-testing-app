{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nconst useStyles = makeStyles(() => ({\n  tableContainer: {\n    width: '85%',\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  },\n  tableHeadRow: {\n    borderRadius: 5\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nexport default function TextTable({\n  segments\n}) {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    className: classes.tableContainer,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        className: classes.tableHeadRow,\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Segment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Transcribed Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: segments ? segments.map((segment, i) => {\n          return /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: segment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"text goes here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","useStyles","tableContainer","width","maxHeight","height","tableHeadRow","borderRadius","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","TextTable","segments","classes","map","segment","i"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,MAAMC,SAAS,GAAGR,UAAU,CAAC,OAAO;AAChCS,EAAAA,cAAc,EAAE;AACZC,IAAAA,KAAK,EAAE,KADK;AAEZC,IAAAA,SAAS,EAAE,qBAFC;AAGZC,IAAAA,MAAM,EAAE;AAHI,GADgB;AAMhCC,EAAAA,YAAY,EAAC;AACTC,IAAAA,YAAY,EAAE;AADL;AANmB,CAAP,CAAD,CAA5B;AAWA,MAAMC,eAAe,GAAGd,UAAU,CAAEe,KAAD,KAAY;AAC3CC,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADlC;AAEJC,IAAAA,KAAK,EAAEN,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBG;AAFxB,GADqC;AAK3CC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AALqC,CAAZ,CAAD,CAAV,CASlBrB,SATkB,CAAxB;AAWA,MAAMsB,cAAc,GAAGzB,UAAU,CAAEe,KAAD,KAAY;AAC9CW,EAAAA,IAAI,EAAE;AACF,0BAAsB;AACtBT,MAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcS,MAAd,CAAqBC;AADhB;AADpB;AADwC,CAAZ,CAAD,CAAV,CAMnBtB,QANmB,CAAvB;AAQA,eAAe,SAASuB,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA+B;AAAA;;AAC1C,QAAMC,OAAO,GAAGxB,SAAS,EAAzB;AACA,sBACI,QAAC,cAAD;AAAgB,IAAA,SAAS,EAAEwB,OAAO,CAACvB,cAAnC;AAAA,2BACA,QAAC,KAAD;AAAO,MAAA,YAAY,MAAnB;AAAoB,oBAAW,cAA/B;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEuB,OAAO,CAACnB,YAA9B;AAAA,+BACA,QAAC,QAAD;AAAA,kCACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,SAAD;AAAA,kBAEQkB,QAAQ,GACRA,QAAQ,CAACE,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,KAAgB;AACzB,8BACA,QAAC,cAAD;AAAA,oCACI,QAAC,eAAD;AAAA,wBAAkBA,CAAC,GAAC;AAApB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,eAAD;AAAA,wBAAkBD;AAAlB;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAqBC,CAArB;AAAA;AAAA;AAAA;AAAA,kBADA;AAMH,SAPD,CADQ,gBASR,QAAC,cAAD;AAAA,kCACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAXR;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH;;GA/BuBL,S;UACJtB,S;;;KADIsB,S","sourcesContent":["import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles(() => ({\n    tableContainer: {\n        width: '85%',\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n    tableHeadRow:{\n        borderRadius: 5,\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\nexport default function TextTable({segments}) {\n    const classes = useStyles()\n    return (\n        <TableContainer className={classes.tableContainer}>\n        <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead className={classes.tableHeadRow}>\n            <TableRow>\n                <StyledTableCell>Segment</StyledTableCell>\n                <StyledTableCell>Transcribed Text</StyledTableCell>\n            </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    segments ?\n                    segments.map((segment, i) => {\n                        return (\n                        <StyledTableRow key={i}>\n                            <StyledTableCell>{i+1}</StyledTableCell>\n                            <StyledTableCell>{segment}</StyledTableCell>\n                        </StyledTableRow>\n                        )\n                    }) :\n                    <StyledTableRow>\n                        <StyledTableCell>0</StyledTableCell>\n                        <StyledTableCell>text goes here</StyledTableCell>\n                    </StyledTableRow>\n                }\n            </TableBody>\n        </Table>\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}