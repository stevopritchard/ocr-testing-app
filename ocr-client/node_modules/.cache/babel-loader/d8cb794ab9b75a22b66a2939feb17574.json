{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/App.js\";\nimport React from 'react';\nimport { Grid, Container, AppBar, Card } from '@material-ui/core';\nimport Dropzone from './Components/Dropzone/Dropzone';\nimport Scroll from './Components/Scroll/Scroll';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      acceptedImage: \"\"\n    };\n\n    this.postText = async () => {\n      const response = await fetch('http://localhost:5000/submit_image', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: `public/img/${this.state.acceptedImage}`\n        })\n      });\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.writeFile = async () => {\n      const response = await fetch('http://localhost:5000/write_image', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: `public/img/${this.state.acceptedImage}`\n        })\n      });\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.uploadImage = async image => {\n      var formData = new FormData();\n      formData.append('photo', image[0]);\n      const response = await fetch('/upload', {\n        method: \"post\",\n        body: formData\n      });\n      const body = await response.json();\n      console.log(body.split(/\\r?\\n/));\n      this.setState({\n        data: body.split(/\\r?\\n/)\n      });\n    };\n  }\n\n  printText() {\n    // this.getText()\n    this.postText().then(res => this.setState({\n      data: res\n    })).catch(err => console.log(err));\n  }\n\n  clearText() {\n    this.setState({\n      data: []\n    });\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"App\",\n      direction: \"column\",\n      alignItems: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        id: \"appBar\",\n        position: \"static\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"dropzoneContainer\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(Dropzone, {\n            uploadImage: this.uploadImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Scroll, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.data.map((segment, i) => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                value: \"segments\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `segment${i}`,\n                  children: [\"Segment \", i + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  name: `segment${i}`,\n                  type: \"text\",\n                  defaultValue: segment\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 23\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        id: \"buttonContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"googleVision\",\n          type: \"button\",\n          onClick: () => {\n            this.printText();\n          },\n          children: \"Google Vision (img URL)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"tesseractJS\",\n          type: \"button\",\n          onClick: () => {\n            this.writeFile();\n          },\n          children: \"Send Image to Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => this.clearText(),\n          children: \"Clear text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/App.js"],"names":["React","Grid","Container","AppBar","Card","Dropzone","Scroll","App","Component","state","data","acceptedImage","postText","response","fetch","method","headers","body","JSON","stringify","image","json","console","log","status","Error","message","writeFile","uploadImage","formData","FormData","append","split","setState","printText","then","res","catch","err","clearText","logImage","render","map","segment","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, Container, AppBar, Card } from '@material-ui/core';\nimport Dropzone from './Components/Dropzone/Dropzone'\nimport Scroll from './Components/Scroll/Scroll'\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    acceptedImage: \"\"\n  };\n\n\n  postText = async () => {\n    const response = await fetch('http://localhost:5000/submit_image', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        image: `public/img/${this.state.acceptedImage}`\n      })\n    })\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  printText() {\n    // this.getText()\n    this.postText()\n    .then(res => this.setState({data: res}))\n    .catch(err => console.log(err));\n  };\n\n  writeFile = async () => {\n    const response = await fetch('http://localhost:5000/write_image', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        image: `public/img/${this.state.acceptedImage}`\n      })\n    })\n    const body = await response.json();\n    console.log(body)\n    if(response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  };\n\n  uploadImage = async (image) => {\n    var formData = new FormData();\n    formData.append('photo', image[0])\n    const response = await fetch('/upload', {\n      method: \"post\",\n      body: formData\n    })\n    const body = await response.json();\n    console.log(body.split(/\\r?\\n/))\n    this.setState({data: body.split(/\\r?\\n/)})\n  }\n\n  clearText() {\n    this.setState({data: []})\n  }\n\n  logImage() {\n    console.log(this.state.acceptedImage)\n  }\n\n  render() {\n    return (\n      <Grid container className=\"App\" direction=\"column\" alignItems=\"stretch\">\n        <AppBar id=\"appBar\" position=\"static\">\n        </AppBar>\n        <Container id=\"dropzoneContainer\">\n          <Card variant=\"outlined\">\n            <Dropzone uploadImage = {this.uploadImage}/>\n          </Card>\n        </Container>\n        <Container>\n        {/* <p>{this.state.data}</p> */}\n          <Scroll>\n            <div>\n              {\n                this.state.data.map((segment, i) => {\n                  return (\n                    <form key={i} value=\"segments\">\n                      <label htmlFor={`segment${i}`}>Segment {i+1}</label>\n                      <input name={`segment${i}`} type=\"text\" defaultValue={segment}></input>\n                    </form>\n                  )\n                })\n              }\n            </div>\n          </Scroll>\n        </Container>\n        <Container id=\"buttonContainer\">\n          <button id=\"googleVision\" type=\"button\" onClick={() => {this.printText()}}>Google Vision (img URL)</button>\n          <button id=\"tesseractJS\" type=\"button\" onClick={() => {this.writeFile()}}>Send Image to Server</button>\n        </Container>\n        <Container>\n          <button type=\"button\" onClick={() => this.clearText()}>Clear text</button>\n        </Container>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}