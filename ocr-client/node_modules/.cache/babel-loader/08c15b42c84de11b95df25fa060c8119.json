{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport MaterialTable, { Column } from 'material-table';\nimport { Select, MenuItem } from '@material-ui/core';\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    maxHeight: 'calc(100vh - 150px)',\n    height: '100%'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {//   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-ot-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nconst columns = [{\n  title: 'Line',\n  field: 'line',\n  type: 'numeric'\n}, {\n  title: 'Category',\n  field: 'category' // render: (\n  //     <Select>\n  //     </Select>\n  // )\n\n}, {\n  title: 'Text',\n  field: 'text',\n  type: 'string'\n}];\nexport default function TextTable({\n  segments\n}) {\n  _s();\n\n  let data = [];\n\n  if (segments !== null) {\n    data = segments.map((segment, i) => {\n      if (segment !== \"\") {\n        return {\n          line: i + 1,\n          text: segment\n        };\n      } else {\n        return {};\n      }\n    });\n  } else {\n    data = [{\n      line: 1,\n      text: \"blah\"\n    }];\n  }\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"Material Table (Cascading)\",\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextTable, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextTable\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Components/TextTable/TextTable.js"],"names":["React","makeStyles","withStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Checkbox","Paper","MaterialTable","Column","Select","MenuItem","useStyles","container","marginLeft","marginRight","maxHeight","height","StyledTableCell","theme","head","body","fontSize","StyledTableRow","root","backgroundColor","palette","action","hover","columns","title","field","type","TextTable","segments","data","map","segment","i","line","text","classes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\n\nimport MaterialTable, { Column } from 'material-table';\nimport {Select, MenuItem } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: {\n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\nconst columns = [\n    {\n        title: 'Line',\n        field: 'line',\n        type: 'numeric'\n    },\n    {\n        title: 'Category',\n        field: 'category',\n        // render: (\n        //     <Select>\n        //     </Select>\n        // )\n    },\n    { \n        title: 'Text', \n        field: 'text', \n        type: 'string' \n    }\n]\n\nexport default function TextTable({segments}) {\n    let data = []\n    if (segments !== null) {\n        data = segments.map((segment, i) => {\n            if (segment !== \"\") {\n                return {line: i+1, text: segment}\n            } else {\n                return {}\n            }\n        })\n    } else {\n        data = [{line: 1, text: \"blah\"}];\n    }\n    const classes = useStyles()\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            {/* <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                <TableRow>\n                    <StyledTableCell></StyledTableCell>\n                    <StyledTableCell>Line</StyledTableCell>\n                    <StyledTableCell>Transcribed Text</StyledTableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        segments ?\n                        segments.map((segment, i) => {\n                            if (segment !== \"\") {\n                                return (\n                                <StyledTableRow key={i}>\n                                    <Checkbox></Checkbox>\n                                    <StyledTableCell>{i+1}</StyledTableCell>\n                                    <StyledTableCell>{segment}</StyledTableCell>\n                                </StyledTableRow>\n                                )\n                            } else {\n                                return null\n                            }\n                        }) \n                        :\n                        <StyledTableRow>\n                            <Checkbox></Checkbox>\n                            <StyledTableCell></StyledTableCell>\n                            <StyledTableCell></StyledTableCell>\n                        </StyledTableRow>\n                    }\n                </TableBody>\n            </Table> */}\n            <MaterialTable\n                title=\"Material Table (Cascading)\"\n                columns={columns}\n                data={data}\n            />\n        </TableContainer>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}